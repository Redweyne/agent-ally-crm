{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nRedweyne is a customer relationship management (CRM) system designed specifically for real estate agents. The application helps agents manage their prospects (both buyers and sellers), track interactions, manage property deals, and monitor sales performance through an intuitive dashboard interface.\n\n## Recent Enhancements (August 2025)\n\nThe CRM has been significantly enhanced with business-focused features to maximize agent productivity and revenue tracking:\n\n### Core Business Features\n- **Demo Data & Authentication**: Fixed demo accounts (admin/demo123, agent1/demo123, agent2/demo123) with realistic prospect data\n- **Business Value Features**: Mandate Pending status, exact source tracking, ROI calculator, Hot Lead auto-detection\n- **Advanced Filtering**: Budget range filters, \"Call Today\" view, sorting by value/score/date\n- **Contact Management**: Timeline tracking, WhatsApp integration, pre-filled messages, PDF export capabilities\n\n### Professional UI & UX\n- **Dark Mode Support**: Professional light/dark theme toggle with full CSS variable system\n- **Smart Notifications**: Real-time notifications panel for calls due, hot leads, and follow-ups\n- **Mobile Components**: Express mode for mobile prospect management\n- **Agency Branding**: Customizable colors, logos, and fonts for white-label deployment\n- **Enhanced Dashboards**: Improved KPI cards, charts, and prospect pipeline visualization\n\n### Technical Improvements\n- **Database Enhancements**: Added lead scoring, contact timeline, ROI tracking fields\n- **Demo Data System**: Automatic initialization of realistic demo data on startup\n- **Component Architecture**: Modular CRM components for easy customization\n- **Performance**: Optimized filtering, sorting, and real-time updates\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side application is built with React and TypeScript, utilizing modern React patterns and hooks. The UI is built with shadcn/ui components, providing a consistent and professional design system. The application uses Wouter for client-side routing and TanStack Query for server state management and caching. The frontend follows a component-based architecture with reusable UI components and business logic separated into custom hooks.\n\n## Backend Architecture\nThe server is built with Express.js and follows a RESTful API design pattern. The application uses a three-tier architecture:\n- **Routes Layer**: Handles HTTP requests and responses\n- **Storage Layer**: Abstracts database operations through a storage interface\n- **Database Layer**: PostgreSQL with Drizzle ORM for type-safe database operations\n\nAuthentication is implemented using Passport.js with local strategy and session-based authentication. Password hashing is handled using Node.js crypto module with scrypt.\n\n## Data Storage\nThe application uses PostgreSQL as the primary database with Drizzle ORM providing type-safe database operations and migrations. The database schema includes:\n- **Users table**: Stores agent information with role-based access\n- **Prospects table**: Contains comprehensive prospect data including contact information, property details, budget, and interaction history\n- **Session store**: PostgreSQL-backed session storage for authentication\n\n## Authentication and Authorization\nSession-based authentication is implemented with:\n- Local username/password strategy via Passport.js\n- Secure password hashing using scrypt with random salt\n- Role-based access control (admin/agent roles)\n- Session persistence in PostgreSQL\n- CSRF protection through session management\n\n## Build and Deployment\nThe application uses Vite for frontend bundling and development, with esbuild for server-side bundling. The project supports both development and production environments with appropriate optimizations and error handling.\n\n# External Dependencies\n\n## Database Services\n- **PostgreSQL**: Primary database for storing all application data\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n## Authentication\n- **Passport.js**: Authentication middleware with local strategy\n- **Express Session**: Session management with PostgreSQL store\n- **Connect PG Simple**: PostgreSQL session store adapter\n\n## UI Framework\n- **shadcn/ui**: Complete UI component library built on Radix UI\n- **Radix UI**: Accessible, unstyled UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## State Management\n- **TanStack Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema validation\n\n## Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds","size_bytes":5041},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          100: \"var(--primary-100)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n          800: \"var(--primary-800)\",\n          900: \"var(--primary-900)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3282},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/CRM_1755260721591.jsx":{"content":"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Phone, MessageSquare, Calendar, CheckCircle2, XCircle, Download, Upload, Filter, User, Plus,\r\n  Clock, Mail, MapPin, Euro, Home, Building2, Trash2, Search, Star, ShieldCheck, AlertTriangle,\r\n  BarChart3, Crown, FileText, Info as InfoIcon\r\n} from \"lucide-react\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\nimport jsPDF from \"jspdf\";\r\n\r\n/* ------------------------------------------------------------\r\n   CRM Redweyne — Version 100% FR + Boost Mandataires\r\n   - Noms FR (fonctions, variables, composants)\r\n   - KPI mandataire (SLA, valeur pipeline €, exclusivités, RDV 7j)\r\n   - Onglet \"Opportunités\" (valeur attendue, RDV imminent)\r\n   - Score mandataire\r\n   - Export CSV + Export PDF\r\n   - Création RDV .ICS\r\n   - Scripts + Paramètres + RGPD + Tutoriel\r\n------------------------------------------------------------ */\r\n\r\n/* ====== Constantes ====== */\r\nconst STATUTS = [\r\n  \"Nouveau\",\r\n  \"Contacté\",\r\n  \"Qualifié\",\r\n  \"RDV fixé\",\r\n  \"Mandat signé\",\r\n  \"Gagné\",\r\n  \"Perdu\",\r\n  \"Pas de réponse\",\r\n];\r\n\r\nconst PROBA_PAR_STATUT = {\r\n  \"Nouveau\": 0.05,\r\n  \"Contacté\": 0.1,\r\n  \"Qualifié\": 0.25,\r\n  \"RDV fixé\": 0.5,\r\n  \"Mandat signé\": 0.9,\r\n  \"Gagné\": 1,\r\n  \"Perdu\": 0,\r\n  \"Pas de réponse\": 0.02,\r\n};\r\n\r\nconst RELANCE_PAR_DEFAUT = [2, 5, 10]; // jours (J+2, J+5, J+10)\r\nconst SEUIL_VALEUR_EUR = 3000; // seuil \"Opportunités\"\r\n\r\n/* ====== Données exemple ====== */\r\nconst AGENTS_EXEMPLE = [\r\n  { id: \"rwd\", nom: \"Redweyne (Global)\", email: \"redweyne@crm.local\", telephone: \"+33 6 00 00 00 00\" },\r\n  { id: \"ag1\", nom: \"Alice Martin\", email: \"alice.martin@agence.fr\", telephone: \"+33 6 11 22 33 44\" },\r\n  { id: \"ag2\", nom: \"Benjamin Leroy\", email: \"ben.leroy@agence.fr\", telephone: \"+33 6 55 66 77 88\" },\r\n];\r\n\r\nconst PROSPECTS_EXEMPLE = [\r\n  {\r\n    id: \"P-1001\",\r\n    creeLe: new Date().toISOString(),\r\n    nomComplet: \"Sophie Bernard\",\r\n    telephone: \"+33 6 12 34 56 78\",\r\n    email: \"sophie.bernard@example.com\",\r\n    type: \"Vendeur\",\r\n    ville: \"Nantes\",\r\n    typeBien: \"Appartement\",\r\n    budget: 0,\r\n    prixEstime: 320000,\r\n    tauxHonoraires: 0.04,\r\n    exclusif: false,\r\n    motivation: \"Déménagement professionnel en septembre\",\r\n    timeline: \"< 3 mois\",\r\n    intention: \"Estimation + mise en vente\",\r\n    source: \"Campagne Meta - Form Lead\",\r\n    consentement: true,\r\n    statut: \"Qualifié\",\r\n    dernierContact: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),\r\n    prochaineAction: new Date(Date.now() + 1000 * 60 * 60 * 48).toISOString(),\r\n    agentId: \"ag1\",\r\n    adresse: \"Île de Nantes\",\r\n    notes: \"Très réactive, préfère appel le midi.\",\r\n  },\r\n  {\r\n    id: \"P-1002\",\r\n    creeLe: new Date().toISOString(),\r\n    nomComplet: \"Karim Haddad\",\r\n    telephone: \"+33 7 98 76 54 32\",\r\n    email: \"karim.haddad@example.com\",\r\n    type: \"Acheteur\",\r\n    ville: \"Rezé\",\r\n    typeBien: \"Maison\",\r\n    budget: 450000,\r\n    prixEstime: 0,\r\n    tauxHonoraires: 0.03,\r\n    exclusif: false,\r\n    motivation: \"Nouveau bébé, besoin d'une chambre en plus\",\r\n    timeline: \"3–6 mois\",\r\n    intention: \"Recherche + alerte\",\r\n    source: \"Google Ads - Landing\",\r\n    consentement: true,\r\n    statut: \"Contacté\",\r\n    dernierContact: new Date(Date.now() - 1000 * 60 * 60 * 5).toISOString(),\r\n    prochaineAction: new Date(Date.now() + 1000 * 60 * 60 * 72).toISOString(),\r\n    agentId: \"ag2\",\r\n    adresse: \"Rezé centre\",\r\n    notes: \"Ok pour visio.\",\r\n  },\r\n  {\r\n    id: \"P-1003\",\r\n    creeLe: new Date().toISOString(),\r\n    nomComplet: \"Claire Dupuis\",\r\n    telephone: \"+33 6 22 33 44 55\",\r\n    email: \"\",\r\n    type: \"Vendeur\",\r\n    ville: \"Saint-Herblain\",\r\n    typeBien: \"Maison\",\r\n    budget: 0,\r\n    prixEstime: 380000,\r\n    tauxHonoraires: 0.05,\r\n    exclusif: true,\r\n    motivation: \"Succession, souhaite vendre discrètement\",\r\n    timeline: \"< 1 mois\",\r\n    intention: \"Estimation rapide\",\r\n    source: \"Référent - Notaire\",\r\n    consentement: false,\r\n    statut: \"Nouveau\",\r\n    dernierContact: null,\r\n    prochaineAction: null,\r\n    agentId: \"rwd\",\r\n    adresse: \"\",\r\n    notes: \"Ne pas laisser de message vocal.\",\r\n  },\r\n];\r\n\r\n/* ====== Utilitaires ====== */\r\nconst fmtNombre = new Intl.NumberFormat(\"fr-FR\");\r\nconst fmtMonnaie = (v) => new Intl.NumberFormat(\"fr-FR\", { style: \"currency\", currency: \"EUR\" }).format(v || 0);\r\n\r\nconst joursRestants = (iso) => {\r\n  if (!iso) return null;\r\n  const diff = new Date(iso).getTime() - Date.now();\r\n  return Math.round(diff / (1000 * 60 * 60 * 24));\r\n};\r\nconst clamp = (n, min, max) => Math.max(min, Math.min(max, n));\r\nconst normaliserTelephone = (p) => (p || \"\").replace(/\\s|\\+|-/g, \"\");\r\nconst cx = (...cls) => cls.filter(Boolean).join(\" \");\r\n\r\nconst CLES_STOCKAGE = {\r\n  prospects: \"rw_crm_prospects_fr\",\r\n  agents: \"rw_crm_agents_fr\",\r\n  relance: \"rw_crm_relance_fr\",\r\n  onboarding: \"rw_crm_onboarding_done\",\r\n};\r\n\r\nfunction chargerLS(cle, defautVal) {\r\n  try { const v = localStorage.getItem(cle); return v ? JSON.parse(v) : defautVal; } catch { return defautVal; }\r\n}\r\nfunction sauverLS(cle, valeur) {\r\n  try { localStorage.setItem(cle, JSON.stringify(valeur)); } catch {}\r\n}\r\n\r\n/* ====== Liens (Téléphone/SMS/WhatsApp) ====== */\r\nfunction lienTel(tel) { return tel ? `tel:${String(tel).replace(/\\s+/g, \"\")}` : \"#\"; }\r\nfunction lienSMS(tel, texte = \"Bonjour, c’est Redweyne. Comme convenu je vous contacte…\") {\r\n  return tel ? `sms:${String(tel).replace(/\\s+/g, \"\")}?&body=${encodeURIComponent(texte)}` : \"#\";\r\n}\r\nfunction lienWA(tel, texte = \"Bonjour !\") {\r\n  return tel ? `https://wa.me/${String(tel).replace(/\\s|\\+|-/g, \"\")}?text=${encodeURIComponent(texte)}` : \"#\";\r\n}\r\n\r\n/* ====== Scoring & Valeur attendue ====== */\r\nfunction scoreMandataire(prospect) {\r\n  let score = 50;\r\n  if (prospect.type === \"Vendeur\") score += 10;\r\n  if (prospect.timeline?.includes(\"<\")) score += 10;\r\n  if (prospect.motivation?.length > 20) score += 5;\r\n  if (prospect.consentement) score += 5;\r\n  if (prospect.statut === \"RDV fixé\") score += 8;\r\n  if (prospect.statut === \"Mandat signé\") score += 15;\r\n  if (prospect.statut === \"Gagné\") score += 10;\r\n  if (prospect.statut === \"Perdu\" || prospect.statut === \"Pas de réponse\") score -= 15;\r\n  score += clamp(Math.floor((prospect.budget || 0) / 100000), 0, 10);\r\n  return clamp(score, 0, 100);\r\n}\r\n\r\nfunction valeurAttendueEUR(prospect) {\r\n  const prix = Number(prospect.prixEstime || 0);\r\n  const taux = Number(prospect.tauxHonoraires || 0);\r\n  const proba = PROBA_PAR_STATUT[prospect.statut] ?? 0;\r\n  return prix * taux * proba * (prospect.exclusif ? 1.1 : 1);\r\n}\r\n\r\n/* ====== Export CSV / Import CSV ====== */\r\nfunction exporterCSV(prospects) {\r\n  const entetes = [\r\n    \"id\",\"creeLe\",\"nomComplet\",\"telephone\",\"email\",\"type\",\"ville\",\"typeBien\",\"budget\",\r\n    \"prixEstime\",\"tauxHonoraires\",\"exclusif\",\"motivation\",\"timeline\",\"intention\",\"source\",\r\n    \"consentement\",\"statut\",\"dernierContact\",\"prochaineAction\",\"agentId\",\"score\",\"adresse\",\"notes\"\r\n  ];\r\n  const ech = (v) => (v == null ? \"\" : String(v).replaceAll('\"', '\"\"'));\r\n  const lignes = prospects.map(p => entetes.map(h => `\"${ech(p[h])}\"`).join(\",\")).join(\"\\n\");\r\n  const csv = entetes.join(\",\") + \"\\n\" + lignes;\r\n  const blob = new Blob([csv], { type: \"text/csv\" });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement(\"a\"); a.href = url; a.download = `redweyne_prospects_${new Date().toISOString().slice(0,10)}.csv`; a.click(); URL.revokeObjectURL(url);\r\n}\r\n\r\nfunction importerCSV(fichier, setProspects) {\r\n  const reader = new FileReader();\r\n  reader.onload = () => {\r\n    const texte = reader.result; const [ligneEntete, ...rows] = texte.split(/\\r?\\n/).filter(Boolean);\r\n    const entetes = ligneEntete.split(\",\").map(h => h.replaceAll('\"', \"\").trim());\r\n    const parsed = rows.map(ligne => {\r\n      const cells = ligne.match(/\\\"([^\\\"]*)\\\"(?=,|$)/g)?.map(s => s.replaceAll('\"', \"\")) || ligne.split(\",\");\r\n      const o = {}; entetes.forEach((h, i) => (o[h] = cells[i] || \"\"));\r\n      o.budget = Number(o.budget || 0);\r\n      o.prixEstime = Number(o.prixEstime || 0);\r\n      o.tauxHonoraires = Number(o.tauxHonoraires || 0.04);\r\n      o.exclusif = String(o.exclusif).toLowerCase() === \"true\" || String(o.exclusif).toLowerCase() === \"oui\";\r\n      o.consentement = String(o.consentement).toLowerCase() === \"true\" || String(o.consentement).toLowerCase() === \"oui\";\r\n      o.score = scoreMandataire(o);\r\n      return o;\r\n    });\r\n    setProspects(prev => [...parsed, ...prev]);\r\n  };\r\n  reader.readAsText(fichier);\r\n}\r\n\r\n/* ====== Export PDF ====== */\r\nfunction exporterPDF(kpi, prospects) {\r\n  const doc = new jsPDF();\r\n  doc.setFontSize(18);\r\n  doc.text(\"Rapport CRM – Redweyne\", 14, 18);\r\n\r\n  doc.setFontSize(12);\r\n  const y0 = 36;\r\n  doc.text(`SLA moyen : ${kpi.slaMoyenMin || 0} min`, 14, y0);\r\n  doc.text(`Valeur pipeline : ${fmtMonnaie(kpi.valeurPipeline || 0)}`, 14, y0 + 8);\r\n  doc.text(`Exclusivités : ${kpi.nbExclusifs || 0}`, 14, y0 + 16);\r\n  doc.text(`RDV (7 jours) : ${kpi.rdv7 || 0}`, 14, y0 + 24);\r\n\r\n  doc.text(\"Top 10 prospects par valeur :\", 14, y0 + 40);\r\n  const top = [...prospects].sort((a,b)=>valeurAttendueEUR(b)-valeurAttendueEUR(a)).slice(0,10);\r\n  top.forEach((p,i)=>{\r\n    doc.text(`${i+1}. ${p.nomComplet || \"Sans nom\"} — ${fmtMonnaie(valeurAttendueEUR(p))}`, 14, y0 + 50 + i*7);\r\n  });\r\n\r\n  doc.save(\"rapport_redweyne.pdf\");\r\n}\r\n\r\n/* ====== Création RDV .ICS ====== */\r\nfunction genererICS({ titre, description, debut, fin, lieu }) {\r\n  const dt = (d) => new Date(d).toISOString().replace(/[-:]/g, \"\").split(\".\")[0] + \"Z\";\r\n  return [\r\n    \"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//Redweyne CRM//FR\",\"CALSCALE:GREGORIAN\",\"METHOD:PUBLISH\",\"BEGIN:VEVENT\",\r\n    `UID:${(typeof crypto!==\"undefined\" && crypto.randomUUID) ? crypto.randomUUID() : Math.random().toString(36).slice(2)}`,\r\n    `DTSTAMP:${dt(new Date())}`,\r\n    `DTSTART:${dt(debut)}`,\r\n    `DTEND:${dt(fin || new Date(new Date(debut).getTime() + 30*60*1000))}`,\r\n    `SUMMARY:${titre}`,\r\n    `DESCRIPTION:${(description || \"\").replaceAll(/\\n/g, \"\\\\n\")}`,\r\n    `LOCATION:${lieu || \"\"}`,\r\n    \"END:VEVENT\",\"END:VCALENDAR\",\r\n  ].join(\"\\n\");\r\n}\r\n\r\nfunction creerRDVICS(prospect) {\r\n  const start = new Date(Date.now() + 60 * 60 * 1000);\r\n  const ics = genererICS({\r\n    titre: `RDV — ${prospect.nomComplet || \"Prospect\"}`,\r\n    description: `Téléphone: ${prospect.telephone}\\nIntention: ${prospect.intention}\\nNotes: ${prospect.notes || \"\"}`,\r\n    debut: start,\r\n    fin: new Date(start.getTime() + 30 * 60 * 1000),\r\n    lieu: prospect.adresse || prospect.ville || \"Téléphone\",\r\n  });\r\n  const blob = new Blob([ics], { type: \"text/calendar\" });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement(\"a\"); a.href = url; a.download = `RDV_${prospect.id}.ics`; a.click(); URL.revokeObjectURL(url);\r\n}\r\n\r\n/* ====== Composant principal ====== */\r\nexport default function CRMRedweyneFrancais() {\r\n  // États\r\n  const [agents, setAgents] = useState(() => chargerLS(CLES_STOCKAGE.agents, AGENTS_EXEMPLE));\r\n  const [agentSelectionneId, setAgentSelectionneId] = useState(agents[0]?.id || \"rwd\");\r\n\r\n  const [prospects, setProspects] = useState(() => {\r\n    const enCache = chargerLS(CLES_STOCKAGE.prospects, null);\r\n    if (enCache && Array.isArray(enCache) && enCache.length) {\r\n      return enCache.map(p => ({ ...p, score: scoreMandataire(p) }));\r\n    }\r\n    const seed = PROSPECTS_EXEMPLE.map(p => ({ ...p, score: scoreMandataire(p) }));\r\n    sauverLS(CLES_STOCKAGE.prospects, seed);\r\n    return seed;\r\n  });\r\n\r\n  const [relance, setRelance] = useState(() => chargerLS(CLES_STOCKAGE.relance, RELANCE_PAR_DEFAUT));\r\n  const [recherche, setRecherche] = useState(\"\");\r\n  const [ongletActif, setOngletActif] = useState(\"Tableau Agent\"); // \"Opportunités\" / \"Pipeline\" / \"Prospects\" / \"Scripts\" / \"Paramètres\"\r\n  const [prospectOuvert, setProspectOuvert] = useState(null);\r\n  const [filtreType, setFiltreType] = useState(\"Tous\");\r\n  const [filtreStatut, setFiltreStatut] = useState(\"Tous\");\r\n\r\n  // Tutoriel\r\n  const [afficherTutoriel, setAfficherTutoriel] = useState(() => !localStorage.getItem(CLES_STOCKAGE.onboarding));\r\n  const [etapeTutoriel, setEtapeTutoriel] = useState(0);\r\n  const etapes = [\r\n    { titre: \"Bienvenue\", texte: \"Voici ton CRM 100% français. On va faire un tour rapide.\" },\r\n    { titre: \"Tableau Agent\", texte: \"Suis tes KPI utiles : SLA, valeur pipeline, exclusivités, RDV semaine.\" },\r\n    { titre: \"Opportunités\", texte: \"Retrouve les prospects à forte valeur et agis en priorité.\" },\r\n    { titre: \"Pipeline\", texte: \"Avance les statuts en vue Kanban.\" },\r\n    { titre: \"Prospects\", texte: \"Filtre, recherche, exporte et importe tes contacts.\" },\r\n  ];\r\n  function terminerTutoriel() {\r\n    localStorage.setItem(CLES_STOCKAGE.onboarding, \"1\");\r\n    setAfficherTutoriel(false);\r\n  }\r\n\r\n  // Persistance\r\n  useEffect(() => sauverLS(CLES_STOCKAGE.prospects, prospects), [prospects]);\r\n  useEffect(() => sauverLS(CLES_STOCKAGE.agents, agents), [agents]);\r\n  useEffect(() => sauverLS(CLES_STOCKAGE.relance, relance), [relance]);\r\n\r\n  // Doublons (téléphone)\r\n  const doublonsTel = useMemo(() => {\r\n    const map = new Map();\r\n    prospects.forEach(p => {\r\n      const k = normaliserTelephone(p.telephone);\r\n      if (!k) return;\r\n      map.set(k, (map.get(k) || 0) + 1);\r\n    });\r\n    return map;\r\n  }, [prospects]);\r\n\r\n  // Filtrage / recherche\r\n  const prospectsFiltres = useMemo(() => {\r\n    return prospects\r\n      .filter(p => agentSelectionneId === \"rwd\" ? true : p.agentId === agentSelectionneId)\r\n      .filter(p => (filtreType === \"Tous\" ? true : p.type === filtreType))\r\n      .filter(p => (filtreStatut === \"Tous\" ? true : p.statut === filtreStatut))\r\n      .filter(p => {\r\n        const q = recherche.trim().toLowerCase();\r\n        if (!q) return true;\r\n        return [p.nomComplet, p.telephone, p.ville, p.typeBien, p.intention, p.motivation, p.notes]\r\n          .filter(Boolean)\r\n          .some(v => v.toLowerCase().includes(q));\r\n      });\r\n  }, [prospects, recherche, agentSelectionneId, filtreType, filtreStatut]);\r\n\r\n  // KPI (Tableau Agent)\r\n  const kpi = useMemo(() => {\r\n    const ajdStr = new Date().toDateString();\r\n    const nbAjd = prospects.filter(p => new Date(p.creeLe).toDateString() === ajdStr).length;\r\n    const nbRDV = prospects.filter(p => p.statut === \"RDV fixé\").length;\r\n    const nbGagnes = prospects.filter(p => p.statut === \"Gagné\").length;\r\n    const tauxConv = prospects.length ? Math.round((nbGagnes / prospects.length) * 100) : 0;\r\n\r\n    const prospectsAgent = prospects.filter(p => agentSelectionneId === \"rwd\" ? true : p.agentId === agentSelectionneId);\r\n    const reponses = prospectsAgent\r\n      .filter(p => p.dernierContact)\r\n      .map(p => new Date(p.dernierContact).getTime() - new Date(p.creeLe).getTime())\r\n      .filter(v => v > 0);\r\n    const slaMoyenMin = reponses.length ? Math.round(reponses.reduce((a,b) => a + b, 0) / reponses.length / 60000) : 0;\r\n\r\n    const valeurPipeline = prospectsAgent\r\n      .filter(p => [\"Qualifié\", \"RDV fixé\", \"Mandat signé\", \"Gagné\"].includes(p.statut))\r\n      .reduce((s, p) => s + valeurAttendueEUR(p), 0);\r\n\r\n    const nbExclusifs = prospectsAgent.filter(p => p.exclusif).length;\r\n\r\n    const dans7j = Date.now() + 7 * 24 * 60 * 60 * 1000;\r\n    const rdv7 = prospectsAgent.filter(p => p.prochaineAction && new Date(p.prochaineAction).getTime() <= dans7j && p.statut === \"RDV fixé\").length;\r\n\r\n    return { nbAjd, nbRDV, nbGagnes, tauxConv, slaMoyenMin, valeurPipeline, nbExclusifs, rdv7 };\r\n  }, [prospects, agentSelectionneId]);\r\n\r\n  // Graph activité 7 jours (snapshot simple)\r\n  const donneesGraph = useMemo(() => {\r\n    const jours = [...Array(7)].map((_, i) => {\r\n      const d = new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000);\r\n      const label = d.toLocaleDateString(\"fr-FR\", { weekday: \"short\" });\r\n      const crees = prospects.filter(p => new Date(p.creeLe).toDateString() === d.toDateString()).length;\r\n      const contactes = prospects.filter(p => p.statut === \"Contacté\").length;\r\n      const rdv = prospects.filter(p => p.statut === \"RDV fixé\").length;\r\n      return { name: label, \"Créés\": crees, \"Contactés\": contactes, \"RDV\": rdv };\r\n    });\r\n    return jours;\r\n  }, [prospects]);\r\n\r\n  // Sélections onglets\r\n  const opportunites = useMemo(() => {\r\n    const dans3j = Date.now() + 3 * 24 * 60 * 60 * 1000;\r\n    return prospectsFiltres\r\n      .map(p => ({ ...p, valeur: valeurAttendueEUR(p) }))\r\n      .filter(p =>\r\n        p.valeur >= SEUIL_VALEUR_EUR ||\r\n        (p.prochaineAction && new Date(p.prochaineAction).getTime() <= dans3j) ||\r\n        [\"RDV fixé\", \"Mandat signé\"].includes(p.statut)\r\n      )\r\n      .sort((a, b) => b.valeur - a.valeur || b.score - a.score);\r\n  }, [prospectsFiltres]);\r\n\r\n  const colonnesPipeline = useMemo(() => {\r\n    const m = {}; STATUTS.forEach(s => (m[s] = []));\r\n    prospectsFiltres.forEach(p => m[p.statut]?.push(p));\r\n    return m;\r\n  }, [prospectsFiltres]);\r\n\r\n  /* ====== Mutations ====== */\r\n  function mettreAJourProspect(id, patch) {\r\n    setProspects(prev => prev.map(p => (p.id === id ? { ...p, ...patch, score: scoreMandataire({ ...p, ...patch }) } : p)));\r\n  }\r\n\r\n  function ajouterProspect() {\r\n    const nid = `P-${Math.floor(Math.random() * 9000 + 1000)}`;\r\n    const vierge = {\r\n      id: nid, creeLe: new Date().toISOString(), nomComplet: \"\", telephone: \"\", email: \"\",\r\n      type: \"Vendeur\", ville: \"\", typeBien: \"Appartement\", budget: 0,\r\n      prixEstime: 0, tauxHonoraires: 0.04, exclusif: false,\r\n      motivation: \"\", timeline: \"3–6 mois\", intention: \"\", source: \"Ajout manuel\",\r\n      consentement: false, statut: \"Nouveau\", dernierContact: null, prochaineAction: null,\r\n      agentId: agentSelectionneId, adresse: \"\", notes: \"\", score: 50,\r\n    };\r\n    setProspects([vierge, ...prospects]); setProspectOuvert(vierge);\r\n  }\r\n\r\n  function supprimerProspect(id) {\r\n    setProspects(prev => prev.filter(p => p.id !== id));\r\n    if (prospectOuvert?.id === id) setProspectOuvert(null);\r\n  }\r\n\r\n  function deplacerStatut(prospect, direction = 1) {\r\n    const i = STATUTS.indexOf(prospect.statut);\r\n    const n = clamp(i + direction, 0, STATUTS.length - 1);\r\n    mettreAJourProspect(prospect.id, { statut: STATUTS[n] });\r\n  }\r\n\r\n  /* ====== UI ====== */\r\n  const agentActif = agents.find(a => a.id === agentSelectionneId) || agents[0];\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-neutral-50 text-neutral-900\">\r\n      {/* En-tête */}\r\n      <header className=\"sticky top-0 z-20 bg-white/90 backdrop-blur border-b border-neutral-200\">\r\n        <div className=\"max-w-7xl mx-auto px-4 py-3 flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"w-9 h-9 rounded-2xl bg-neutral-900 text-white grid place-items-center font-bold\">RW</div>\r\n            <div>\r\n              <div className=\"font-semibold leading-tight\">Redweyne CRM — Leads Immobiliers</div>\r\n              <div className=\"text-xs text-neutral-500\">Bonus d’inscription • Simple, rapide, orienté mandat</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"flex items-center gap-2 bg-neutral-100 rounded-xl px-3 py-2\">\r\n              <User className=\"w-4 h-4 text-neutral-500\"/>\r\n              <select\r\n                value={agentSelectionneId}\r\n                onChange={e => setAgentSelectionneId(e.target.value)}\r\n                className=\"bg-transparent text-sm focus:outline-none\"\r\n              >\r\n                {agents.map(a => <option key={a.id} value={a.id}>{a.nom}</option>)}\r\n              </select>\r\n            </div>\r\n\r\n            <button\r\n              onClick={() => exporterCSV(prospects)}\r\n              className=\"inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-white border text-sm\"\r\n              title=\"Exporter CSV\"\r\n            >\r\n              <Download className=\"w-4 h-4\"/> CSV\r\n            </button>\r\n\r\n            <label className=\"inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-white border text-sm cursor-pointer\" title=\"Importer CSV\">\r\n              <Upload className=\"w-4 h-4\"/> Import\r\n              <input type=\"file\" accept=\".csv\" className=\"hidden\" onChange={e=> e.target.files?.[0] && importerCSV(e.target.files[0], setProspects)} />\r\n            </label>\r\n\r\n            <button\r\n              onClick={() => exporterPDF(kpi, prospects)}\r\n              className=\"inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-white border text-sm\"\r\n              title=\"Exporter PDF\"\r\n            >\r\n              <FileText className=\"w-4 h-4\"/> PDF\r\n            </button>\r\n\r\n            <button\r\n              onClick={ajouterProspect}\r\n              className=\"inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-neutral-900 text-white text-sm\"\r\n              title=\"Nouveau prospect\"\r\n            >\r\n              <Plus className=\"w-4 h-4\"/> Nouveau\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Tutoriel au premier lancement */}\r\n      {afficherTutoriel && (\r\n        <div className=\"fixed inset-0 bg-black/30 backdrop-blur-sm z-40 flex items-center justify-center\">\r\n          <div className=\"bg-white rounded-2xl shadow-xl border max-w-md w-full p-5\">\r\n            <div className=\"flex items-center gap-2 text-neutral-600 text-sm\">\r\n              <InfoIcon className=\"w-4 h-4\"/> Tutoriel express\r\n            </div>\r\n            <div className=\"mt-2 text-lg font-semibold\">{etapes[etapeTutoriel].titre}</div>\r\n            <div className=\"mt-1 text-sm text-neutral-700\">{etapes[etapeTutoriel].texte}</div>\r\n            <div className=\"mt-4 flex items-center justify-between\">\r\n              <button\r\n                className=\"px-3 py-2 rounded-xl border text-sm\"\r\n                onClick={() => setEtapeTutoriel(Math.max(0, etapeTutoriel - 1))}\r\n                disabled={etapeTutoriel === 0}\r\n              >\r\n                Précédent\r\n              </button>\r\n              {etapeTutoriel < etapes.length - 1 ? (\r\n                <button\r\n                  className=\"px-3 py-2 rounded-xl bg-neutral-900 text-white text-sm\"\r\n                  onClick={() => setEtapeTutoriel(etapeTutoriel + 1)}\r\n                >\r\n                  Continuer\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  className=\"px-3 py-2 rounded-xl bg-neutral-900 text-white text-sm\"\r\n                  onClick={terminerTutoriel}\r\n                >\r\n                  Terminer\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Contenu */}\r\n      <main className=\"max-w-7xl mx-auto px-4 py-6\">\r\n        {/* KPIs tête de page */}\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <KPI icone={Plus} etiquette=\"Leads aujourd’hui\" valeur={kpi.nbAjd} sousTexte=\"nouveaux\" aide=\"Nombre de prospects créés aujourd’hui.\"/>\r\n          <KPI icone={Calendar} etiquette=\"RDV fixés\" valeur={kpi.nbRDV} sousTexte=\"pipeline actif\" aide=\"Prospects au statut RDV fixé.\"/>\r\n          <KPI icone={CheckCircle2} etiquette=\"Gagnés\" valeur={kpi.nbGagnes} sousTexte=\"mandats\" aide=\"Nombre de mandats gagnés.\"/>\r\n          <KPI icone={Star} etiquette=\"Taux de conv.\" valeur={`${kpi.tauxConv}%`} sousTexte=\"global\" aide=\"(Mandats gagnés) / (Prospects totaux).\"/>\r\n        </div>\r\n\r\n        {/* Tableau Agent (valeur) */}\r\n        <div className=\"mt-6 grid grid-cols-1 lg:grid-cols-4 gap-4\">\r\n          <CarteKPI titre=\"SLA moyen\" aide=\"Temps moyen entre la création du lead et le 1er contact.\">\r\n            <div className=\"text-2xl font-semibold mt-1\">{kpi.slaMoyenMin ? `${kpi.slaMoyenMin} min` : \"—\"}</div>\r\n            <div className=\"text-xs text-neutral-500\">Temps de 1ère réponse</div>\r\n          </CarteKPI>\r\n          <CarteKPI titre=\"Valeur pipeline\" aide=\"Somme des honoraires attendus pondérés par la probabilité.\">\r\n            <div className=\"text-2xl font-semibold mt-1\">{fmtMonnaie(kpi.valeurPipeline)}</div>\r\n            <div className=\"text-xs text-neutral-500\">€ attendus (pondérés)</div>\r\n          </CarteKPI>\r\n          <CarteKPI titre=\"Exclusivités\" aide=\"Prospects marqués en mandat exclusif.\">\r\n            <div className=\"text-2xl font-semibold mt-1\">{kpi.nbExclusifs}</div>\r\n            <div className=\"text-xs text-neutral-500\">Mandats exclusifs</div>\r\n          </CarteKPI>\r\n          <CarteKPI titre=\"RDV (7j)\" aide=\"Rendez-vous planifiés dans les 7 prochains jours.\">\r\n            <div className=\"text-2xl font-semibold mt-1\">{kpi.rdv7}</div>\r\n            <div className=\"text-xs text-neutral-500\">À venir</div>\r\n          </CarteKPI>\r\n        </div>\r\n\r\n        {/* Graph activité */}\r\n        <div className=\"mt-6 p-4 bg-white rounded-2xl shadow-sm border\">\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <div className=\"font-semibold\">Activité 7 jours</div>\r\n          </div>\r\n          <div className=\"h-48\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart data={donneesGraph} margin={{ left: 8, right: 8, top: 8, bottom: 8 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis allowDecimals={false} />\r\n                <Tooltip />\r\n                <Line type=\"monotone\" dataKey=\"Créés\" />\r\n                <Line type=\"monotone\" dataKey=\"Contactés\" />\r\n                <Line type=\"monotone\" dataKey=\"RDV\" />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Onglets */}\r\n        <div className=\"mt-6 flex flex-wrap gap-2\">\r\n          {[\"Tableau Agent\",\"Opportunités\",\"Pipeline\",\"Prospects\",\"Scripts\",\"Paramètres\"].map(t => (\r\n            <button key={t} onClick={()=>setOngletActif(t)} className={cx(\"px-3 py-2 rounded-xl text-sm border\", ongletActif===t?\"bg-neutral-900 text-white\":\"bg-white\")}>{t}</button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* === Onglet : Opportunités === */}\r\n        {ongletActif === \"Opportunités\" && (\r\n          <section className=\"mt-4\">\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"font-semibold\">Opportunités à forte valeur</div>\r\n                <div className=\"text-xs text-neutral-500\">\r\n                  Seuil valeur: {fmtMonnaie(SEUIL_VALEUR_EUR)} • Total: {opportunites.length}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"mt-3 overflow-x-auto\">\r\n                <table className=\"w-full text-sm\">\r\n                  <thead className=\"bg-neutral-50\">\r\n                    <tr className=\"text-left\">\r\n                      <th className=\"p-3\">Prospect</th>\r\n                      <th className=\"p-3\">Type</th>\r\n                      <th className=\"p-3\">Ville</th>\r\n                      <th className=\"p-3\">Bien</th>\r\n                      <th className=\"p-3\">Valeur attendue</th>\r\n                      <th className=\"p-3\">Score</th>\r\n                      <th className=\"p-3\">Statut</th>\r\n                      <th className=\"p-3\">Prochaine action</th>\r\n                      <th className=\"p-3\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {opportunites.map(p => (\r\n                      <tr key={p.id} className=\"border-t hover:bg-neutral-50\">\r\n                        <td className=\"p-3\">\r\n                          <div className=\"font-medium cursor-pointer hover:underline\" onClick={()=>setProspectOuvert(p)}>{p.nomComplet || \"Sans nom\"}</div>\r\n                          <div className=\"text-xs text-neutral-500\">{p.telephone || \"—\"}</div>\r\n                        </td>\r\n                        <td className=\"p-3\">{p.type}</td>\r\n                        <td className=\"p-3\">{p.ville || \"—\"}</td>\r\n                        <td className=\"p-3\">{p.typeBien || \"—\"}</td>\r\n                        <td className=\"p-3 font-medium\">{fmtMonnaie(valeurAttendueEUR(p))}</td>\r\n                        <td className=\"p-3\">\r\n                          <span className={cx(\"px-2 py-1 rounded-lg text-xs\",\r\n                            p.score>=80?\"bg-green-100 text-green-700\":p.score>=60?\"bg-amber-100 text-amber-700\":\"bg-neutral-100 text-neutral-700\"\r\n                          )}>{p.score}</span>\r\n                        </td>\r\n                        <td className=\"p-3\">{p.statut}</td>\r\n                        <td className=\"p-3 text-xs text-neutral-600\">\r\n                          {p.prochaineAction ? `${joursRestants(p.prochaineAction)} j` : \"—\"}\r\n                        </td>\r\n                        <td className=\"p-3\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <a className={cx(\"p-2 rounded-lg border\", p.telephone?\"\":\"opacity-40 pointer-events-none\")} title=\"Appeler\" href={lienTel(p.telephone)}><Phone className=\"w-4 h-4\"/></a>\r\n                            <a className={cx(\"p-2 rounded-lg border\", p.telephone?\"\":\"opacity-40 pointer-events-none\")} title=\"SMS\" href={lienSMS(p.telephone)}><MessageSquare className=\"w-4 h-4\"/></a>\r\n                            <button className=\"p-2 rounded-lg border\" title=\"Ouvrir\" onClick={()=>setProspectOuvert(p)}><FileText className=\"w-4 h-4\"/></button>\r\n                            <button className=\"p-2 rounded-lg border\" title=\"→ Suivant\" onClick={()=>deplacerStatut(p, +1)}>→</button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                    {opportunites.length === 0 && (\r\n                      <tr><td colSpan={9} className=\"p-6 text-center text-neutral-500\">Aucune opportunité selon le seuil.</td></tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        )}\r\n\r\n        {/* === Pipeline (Kanban light) === */}\r\n        {ongletActif === \"Pipeline\" && (\r\n          <section className=\"mt-4 grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4\">\r\n            {STATUTS.slice(0, 6).map(st => (\r\n              <div key={st} className=\"bg-white rounded-2xl shadow-sm border p-3\">\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"font-medium\">{st}</div>\r\n                  <div className=\"text-xs text-neutral-500\">{colonnesPipeline[st]?.length || 0}</div>\r\n                </div>\r\n                <div className=\"space-y-2 max-h-[420px] overflow-auto pr-1\">\r\n                  {(colonnesPipeline[st] || []).map(p => {\r\n                    const telNorm = normaliserTelephone(p.telephone);\r\n                    const isDupe = telNorm && (doublonsTel.get(telNorm) || 0) > 1;\r\n                    return (\r\n                      <div key={p.id} className=\"border rounded-2xl p-3 hover:shadow-sm transition bg-white\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <div className=\"font-medium cursor-pointer hover:underline\" onClick={()=>setProspectOuvert(p)}>{p.nomComplet || \"Sans nom\"}</div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {isDupe && <span className=\"flex items-center gap-1 px-2 py-0.5 rounded-lg text-[10px] bg-amber-100 text-amber-800\"><AlertTriangle className=\"w-3 h-3\"/> Doublon</span>}\r\n                            <div className=\"text-xs px-2 py-1 rounded-lg bg-neutral-100\">{p.type}</div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-xs text-neutral-500 mt-1 flex items-center gap-2\">\r\n                          <MapPin className=\"w-3 h-3\"/> {p.ville || \"—\"}\r\n                          <Building2 className=\"w-3 h-3\"/> {p.typeBien || \"—\"}\r\n                          <Euro className=\"w-3 h-3\"/> {p.prixEstime ? fmtNombre.format(p.prixEstime) : (p.budget ? fmtNombre.format(p.budget) : \"—\")}\r\n                        </div>\r\n                        <div className=\"mt-2 flex items-center gap-2 text-xs\">\r\n                          <a className={cx(\"px-2 py-1 rounded-lg border\", p.telephone?\"\":\"opacity-40 pointer-events-none\")} href={lienTel(p.telephone)}><Phone className=\"w-3 h-3\"/></a>\r\n                          <a className={cx(\"px-2 py-1 rounded-lg border\", p.telephone?\"\":\"opacity-40 pointer-events-none\")} href={lienSMS(p.telephone)}><MessageSquare className=\"w-3 h-3\"/></a>\r\n                          <button className=\"px-2 py-1 rounded-lg border\" onClick={()=>deplacerStatut(p, -1)}>◀</button>\r\n                          <button className=\"px-2 py-1 rounded-lg border\" onClick={()=>deplacerStatut(p, +1)}>▶</button>\r\n                          <button className=\"ml-auto px-2 py-1 rounded-lg border\" onClick={()=>supprimerProspect(p.id)}><Trash2 className=\"w-3 h-3\"/></button>\r\n                        </div>\r\n                        <div className=\"mt-2 text-xs text-neutral-500 line-clamp-2\">{p.motivation || p.intention || p.notes || \"\"}</div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  {(colonnesPipeline[st] || []).length === 0 && (\r\n                    <div className=\"text-xs text-neutral-500\">Aucun prospect.</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </section>\r\n        )}\r\n\r\n        {/* === Prospects (liste + filtres) === */}\r\n        {ongletActif === \"Prospects\" && (\r\n          <section className=\"mt-4\">\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-3 flex flex-wrap gap-2 items-center\">\r\n              <div className=\"flex items-center gap-2 bg-neutral-100 rounded-xl px-3 py-2\">\r\n                <Search className=\"w-4 h-4 text-neutral-500\"/>\r\n                <input\r\n                  className=\"bg-transparent text-sm focus:outline-none\"\r\n                  placeholder=\"Rechercher nom, ville, intention…\"\r\n                  value={recherche}\r\n                  onChange={e=>setRecherche(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"flex items-center gap-2 bg-neutral-100 rounded-xl px-3 py-2\">\r\n                <Filter className=\"w-4 h-4 text-neutral-500\"/>\r\n                <select className=\"bg-transparent text-sm\" value={filtreType} onChange={e=>setFiltreType(e.target.value)}>\r\n                  {[\"Tous\",\"Vendeur\",\"Acheteur\"].map(x=> <option key={x}>{x}</option>)}\r\n                </select>\r\n                <select className=\"bg-transparent text-sm\" value={filtreStatut} onChange={e=>setFiltreStatut(e.target.value)}>\r\n                  {[\"Tous\", ...STATUTS].map(x=> <option key={x}>{x}</option>)}\r\n                </select>\r\n              </div>\r\n              <button\r\n                onClick={ajouterProspect}\r\n                className=\"ml-auto inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-neutral-900 text-white text-sm\"\r\n              >\r\n                <Plus className=\"w-4 h-4\"/> Nouveau prospect\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"mt-3 bg-white rounded-2xl shadow-sm border overflow-hidden\">\r\n              <table className=\"w-full text-sm\">\r\n                <thead className=\"bg-neutral-50\">\r\n                  <tr className=\"text-left\">\r\n                    <th className=\"p-3\">Prospect</th>\r\n                    <th className=\"p-3\">Type</th>\r\n                    <th className=\"p-3\">Ville</th>\r\n                    <th className=\"p-3\">Bien</th>\r\n                    <th className=\"p-3\">Prix estimé</th>\r\n                    <th className=\"p-3\">Honoraires %</th>\r\n                    <th className=\"p-3\">Exclu</th>\r\n                    <th className=\"p-3\">Statut</th>\r\n                    <th className=\"p-3\">Score</th>\r\n                    <th className=\"p-3\">Valeur €</th>\r\n                    <th className=\"p-3\">Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {prospectsFiltres.map(p => (\r\n                    <tr key={p.id} className=\"border-t hover:bg-neutral-50\">\r\n                      <td className=\"p-3\">\r\n                        <div className=\"font-medium cursor-pointer hover:underline\" onClick={()=>setProspectOuvert(p)}>{p.nomComplet || \"Sans nom\"}</div>\r\n                        <div className=\"text-xs text-neutral-500\">{p.telephone || \"—\"}</div>\r\n                      </td>\r\n                      <td className=\"p-3\">{p.type}</td>\r\n                      <td className=\"p-3\">{p.ville || \"—\"}</td>\r\n                      <td className=\"p-3\">{p.typeBien || \"—\"}</td>\r\n                      <td className=\"p-3\">{p.prixEstime ? fmtMonnaie(p.prixEstime) : \"—\"}</td>\r\n                      <td className=\"p-3\">{p.tauxHonoraires ? Math.round(p.tauxHonoraires*100) + \"%\" : \"—\"}</td>\r\n                      <td className=\"p-3\">{p.exclusif ? \"Oui\" : \"Non\"}</td>\r\n                      <td className=\"p-3\">{p.statut}</td>\r\n                      <td className=\"p-3\">\r\n                        <span className={cx(\"px-2 py-1 rounded-lg text-xs\",\r\n                          p.score>=80?\"bg-green-100 text-green-700\":p.score>=60?\"bg-amber-100 text-amber-700\":\"bg-neutral-100 text-neutral-700\"\r\n                        )}>{p.score}</span>\r\n                      </td>\r\n                      <td className=\"p-3\">{fmtMonnaie(valeurAttendueEUR(p))}</td>\r\n                      <td className=\"p-3\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <a className={cx(\"p-2 rounded-lg border\", p.telephone?\"\":\"opacity-40 pointer-events-none\")} title=\"Appeler\" href={lienTel(p.telephone)}><Phone className=\"w-4 h-4\"/></a>\r\n                          <a className={cx(\"p-2 rounded-lg border\", p.telephone?\"\":\"opacity-40 pointer-events-none\")} title=\"SMS\" href={lienSMS(p.telephone)}><MessageSquare className=\"w-4 h-4\"/></a>\r\n                          <button className=\"p-2 rounded-lg border\" title=\"RDV\" onClick={()=>creerRDVICS(p)}><Calendar className=\"w-4 h-4\"/></button>\r\n                          <button className=\"p-2 rounded-lg border\" title=\"Supprimer\" onClick={()=>supprimerProspect(p.id)}><Trash2 className=\"w-4 h-4\"/></button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                  {prospectsFiltres.length === 0 && (\r\n                    <tr>\r\n                      <td colSpan={11} className=\"p-6 text-center text-neutral-500\">Aucun résultat.</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </section>\r\n        )}\r\n\r\n        {/* === Scripts === */}\r\n        {ongletActif === \"Scripts\" && (\r\n          <section className=\"mt-4 grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-4\">\r\n              <div className=\"flex items-center gap-2 font-semibold mb-2\"><Phone className=\"w-4 h-4\"/> Script appel Vendeur</div>\r\n              <ol className=\"list-decimal pl-5 space-y-2 text-sm\">\r\n                <li>Salut, je suis <b>Redweyne</b>. J’ai bien reçu votre demande d’estimation à <b>{agentActif?.nom}</b>. C’est toujours d’actualité ?</li>\r\n                <li>Motif: <i>Pourquoi</i> la vente ? (mutation, famille, projet…) — <span className=\"text-neutral-500\">noter motivation</span></li>\r\n                <li>Timing: vous visez plutôt <b>&lt; 3 mois</b> ou plus tard ?</li>\r\n                <li>Bien: type, surface, adresse approximative. Photos dispo ?</li>\r\n                <li>Prochaine étape: <b>proposer un créneau</b> (visio/visite) et envoyer <b>SMS de confirmation</b>.</li>\r\n              </ol>\r\n              <div className=\"mt-3 text-xs text-neutral-500\">Raccourcis: Résumer en 1 phrase + programmer suivi J+{relance[0]}, J+{relance[1]}, J+{relance[2]}.</div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-4\">\r\n              <div className=\"flex items-center gap-2 font-semibold mb-2\"><Phone className=\"w-4 h-4\"/> Script appel Acheteur</div>\r\n              <ol className=\"list-decimal pl-5 space-y-2 text-sm\">\r\n                <li>Bonjour, <b>Redweyne</b> à l’appareil. Vous cherchez une <b>maison/appartement</b> sur <b>Nantes</b>, c’est bien ça ?</li>\r\n                <li>Budget + financement: déjà validé ? Ex: {fmtMonnaie(250000)}–{fmtMonnaie(500000)}</li>\r\n                <li>Critères clés: quartiers, pièces, extérieur, stationnement.</li>\r\n                <li>Confiance: expliquer le process et <b>mise en alerte</b> + RDV découverte.</li>\r\n                <li>Confirmer: créneau RDV + SMS récap.</li>\r\n              </ol>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-4\">\r\n              <div className=\"flex items-center gap-2 font-semibold mb-2\"><MessageSquare className=\"w-4 h-4\"/> SMS prêts à l’emploi</div>\r\n              <div className=\"space-y-2 text-sm\">\r\n                <Template etiquette=\"Confirmation RDV\">Bonjour {\"{Prénom}\"}, c’est Redweyne. Confirmé pour notre échange {\"{date}\"} à {\"{heure}\"}. Je vous envoie un rappel avant. À tout à l’heure !</Template>\r\n                <Template etiquette=\"Relance J+2\">Bonjour {\"{Prénom}\"}, je fais suite à votre demande {\"{intention}\"}. On s’appelle 5 minutes aujourd’hui ?</Template>\r\n                <Template etiquette=\"Opt-out RGPD\">Bonjour, reçu via formulaire. Si vous ne souhaitez plus être contacté, répondez STOP et je supprime vos données.</Template>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-4\">\r\n              <div className=\"flex items-center gap-2 font-semibold mb-2\"><FileText className=\"w-4 h-4\"/> Email de passation à l’agent</div>\r\n              <p className=\"text-sm whitespace-pre-wrap\">{`Objet: Lead chaud – ${agentActif?.nom} – {Nom}\r\n\r\nBonjour {Prenom Agent},\r\n\r\nVoici un lead qualifié prêt pour un appel:\r\n• Nom: {Nom Complet}\r\n• Téléphone: {Téléphone}\r\n• Intention: {Intention}\r\n• Créneau: {Créneau}\r\n• Notes: {Notes}\r\n\r\nLa personne s’attend à votre appel. Merci de me tenir informé du résultat.\r\n\r\n— Redweyne`}</p>\r\n            </div>\r\n          </section>\r\n        )}\r\n\r\n        {/* === Paramètres === */}\r\n        {ongletActif === \"Paramètres\" && (\r\n          <section className=\"mt-4 grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n            {/* Profil agent */}\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-4\">\r\n              <div className=\"font-semibold mb-2\">Profil agent</div>\r\n              <LigneLibelle libelle=\"Nom\">\r\n                <input className=\"w-full border rounded-xl px-3 py-2\" value={agentActif.nom} onChange={e=>setAgents(agents.map(a=> a.id===agentActif.id? { ...a, nom:e.target.value }: a))}/>\r\n              </LigneLibelle>\r\n              <LigneLibelle libelle=\"Email\">\r\n                <input className=\"w-full border rounded-xl px-3 py-2\" value={agentActif.email} onChange={e=>setAgents(agents.map(a=> a.id===agentActif.id? { ...a, email:e.target.value }: a))}/>\r\n              </LigneLibelle>\r\n              <LigneLibelle libelle=\"Téléphone\">\r\n                <input className=\"w-full border rounded-xl px-3 py-2\" value={agentActif.telephone} onChange={e=>setAgents(agents.map(a=> a.id===agentActif.id? { ...a, telephone:e.target.value }: a))}/>\r\n              </LigneLibelle>\r\n            </div>\r\n\r\n            {/* Cadence de relance */}\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-4\">\r\n              <div className=\"font-semibold mb-2\">Cadence de relance (jours)</div>\r\n              <div className=\"flex items-center gap-2\">\r\n                {relance.map((d, i) => (\r\n                  <input\r\n                    key={i}\r\n                    type=\"number\"\r\n                    className=\"w-20 border rounded-xl px-3 py-2\"\r\n                    value={d}\r\n                    onChange={e=>{\r\n                      const v = Number(e.target.value || 0);\r\n                      const arr = [...relance]; arr[i] = clamp(v, 1, 60); setRelance(arr);\r\n                    }}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <div className=\"text-xs text-neutral-500 mt-2\">\r\n                Auto-planifie les tâches J+{relance[0]}, J+{relance[1]}, J+{relance[2]} après le premier contact.\r\n              </div>\r\n            </div>\r\n\r\n            {/* RGPD */}\r\n            <div className=\"bg-white rounded-2xl shadow-sm border p-4\">\r\n              <div className=\"font-semibold mb-2 flex items-center gap-2\"><ShieldCheck className=\"w-4 h-4\"/> RGPD</div>\r\n              <ul className=\"text-sm list-disc pl-5 space-y-1\">\r\n                <li>Base légale: consentement ou intérêt légitime (prospection immobilière).</li>\r\n                <li>Durée: suppression automatique 24 mois après dernier contact.</li>\r\n                <li>Opt-out: bouton \"STOP\" (SMS) & lien de désinscription email.</li>\r\n                <li>Droits: accès, rectification, suppression sur demande.</li>\r\n              </ul>\r\n              <div className=\"mt-2 text-xs text-neutral-500\">Ce module est indicatif. Prévoir DPA + registre de traitement.</div>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </main>\r\n\r\n      {/* === Volet Prospect (drawer) === */}\r\n      {prospectOuvert && (\r\n        <div className=\"fixed inset-0 bg-black/20 backdrop-blur-sm z-30\" onClick={()=>setProspectOuvert(null)}>\r\n          <div className=\"absolute right-0 top-0 h-full w-full max-w-xl bg-white border-l p-5 overflow-auto\" onClick={e=>e.stopPropagation()}>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"text-xl font-semibold\">{prospectOuvert.nomComplet || \"Sans nom\"}</div>\r\n                <span className={cx(\"px-2 py-1 rounded-lg text-xs\", prospectOuvert.type===\"Vendeur\"?\"bg-rose-100 text-rose-700\":\"bg-blue-100 text-blue-700\")}>{prospectOuvert.type}</span>\r\n                <span className=\"px-2 py-1 rounded-lg text-xs bg-neutral-100\">{prospectOuvert.statut}</span>\r\n                {(normaliserTelephone(prospectOuvert.telephone) && (doublonsTel.get(normaliserTelephone(prospectOuvert.telephone))||0) > 1) && (\r\n                  <span className=\"flex items-center gap-1 px-2 py-1 rounded-lg text-xs bg-amber-100 text-amber-800\"><AlertTriangle className=\"w-3 h-3\"/> Doublon</span>\r\n                )}\r\n              </div>\r\n              <button onClick={()=>setProspectOuvert(null)} className=\"p-2 rounded-lg border\"><XCircle className=\"w-5 h-5\"/></button>\r\n            </div>\r\n\r\n            {/* Infos rapides */}\r\n            <div className=\"grid grid-cols-2 gap-3 mt-4\">\r\n              <BlocInfo libelle=\"Téléphone\" valeur={prospectOuvert.telephone || \"—\"} lien={prospectOuvert.telephone?lienTel(prospectOuvert.telephone):undefined} icone={Phone}/>\r\n              <BlocInfo libelle=\"Email\" valeur={prospectOuvert.email || \"—\"} icone={Mail}/>\r\n              <BlocInfo libelle=\"Ville\" valeur={prospectOuvert.ville || \"—\"} icone={MapPin}/>\r\n              <BlocInfo libelle=\"Type de bien\" valeur={prospectOuvert.typeBien || \"—\"} icone={Home}/>\r\n              <BlocInfo libelle=\"Budget\" valeur={prospectOuvert.budget ? fmtMonnaie(prospectOuvert.budget) : \"—\"} icone={Euro}/>\r\n              <BlocInfo libelle=\"Délai\" valeur={prospectOuvert.timeline || \"—\"} icone={Clock}/>\r\n            </div>\r\n\r\n            {/* Valeur & paramètres mandat */}\r\n            <div className=\"mt-4 grid grid-cols-2 gap-3\">\r\n              <LigneLibelle libelle=\"Prix estimé (vendeur)\">\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"w-full border rounded-xl px-3 py-2\"\r\n                  value={prospectOuvert.prixEstime || 0}\r\n                  onChange={e=>mettreAJourProspect(prospectOuvert.id, { prixEstime: Number(e.target.value||0) })}\r\n                />\r\n              </LigneLibelle>\r\n              <LigneLibelle libelle=\"Honoraires (%)\">\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"w-full border rounded-xl px-3 py-2\"\r\n                  value={Math.round((prospectOuvert.tauxHonoraires||0)*100)}\r\n                  onChange={e=>mettreAJourProspect(prospectOuvert.id, { tauxHonoraires: Number(e.target.value||0)/100 })}\r\n                />\r\n              </LigneLibelle>\r\n              <div className=\"col-span-2 flex items-center gap-2\">\r\n                <input id=\"exclu\" type=\"checkbox\" checked={!!prospectOuvert.exclusif} onChange={e=>mettreAJourProspect(prospectOuvert.id, { exclusif: e.target.checked })}/>\r\n                <label htmlFor=\"exclu\" className=\"text-sm\">Mandat exclusif</label>\r\n                <div className=\"ml-auto text-sm\">Valeur attendue: <b>{fmtMonnaie(valeurAttendueEUR(prospectOuvert))}</b></div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Champs texte */}\r\n            <div className=\"mt-4\">\r\n              <LigneLibelle libelle=\"Intention\">\r\n                <input\r\n                  className=\"w-full border rounded-xl px-3 py-2\"\r\n                  value={prospectOuvert.intention || \"\"}\r\n                  onChange={e=>mettreAJourProspect(prospectOuvert.id, { intention: e.target.value })}\r\n                />\r\n              </LigneLibelle>\r\n\r\n              <LigneLibelle libelle=\"Motivation\">\r\n                <textarea\r\n                  className=\"w-full border rounded-xl px-3 py-2\"\r\n                  rows={3}\r\n                  value={prospectOuvert.motivation || \"\"}\r\n                  onChange={e=>mettreAJourProspect(prospectOuvert.id, { motivation: e.target.value })}\r\n                />\r\n              </LigneLibelle>\r\n\r\n              <LigneLibelle libelle=\"Adresse (optionnel)\">\r\n                <input\r\n                  className=\"w-full border rounded-xl px-3 py-2\"\r\n                  value={prospectOuvert.adresse || \"\"}\r\n                  onChange={e=>mettreAJourProspect(prospectOuvert.id, { adresse: e.target.value })}\r\n                />\r\n              </LigneLibelle>\r\n\r\n              <LigneLibelle libelle=\"Notes internes\">\r\n                <textarea\r\n                  className=\"w-full border rounded-xl px-3 py-2\"\r\n                  rows={3}\r\n                  value={prospectOuvert.notes || \"\"}\r\n                  onChange={e=>mettreAJourProspect(prospectOuvert.id, { notes: e.target.value })}\r\n                />\r\n              </LigneLibelle>\r\n            </div>\r\n\r\n            {/* Actions rapides */}\r\n            <div className=\"grid grid-cols-2 gap-3 mt-3\">\r\n              <button\r\n                className={cx(\"inline-flex items-center justify-center gap-2 px-3 py-2 rounded-xl\",\r\n                  prospectOuvert.telephone?\"bg-neutral-900 text-white\":\"bg-neutral-200 text-neutral-500 cursor-not-allowed\")}\r\n                disabled={!prospectOuvert.telephone}\r\n                onClick={()=>prospectOuvert.telephone && window.open(lienTel(prospectOuvert.telephone), \"_blank\")}\r\n              >\r\n                <Phone className=\"w-4 h-4\"/> Appeler\r\n              </button>\r\n              <a\r\n                className={cx(\"inline-flex items-center justify-center gap-2 px-3 py-2 rounded-xl border\",\r\n                  prospectOuvert.telephone?\"\":\"opacity-40 pointer-events-none\")}\r\n                href={lienSMS(prospectOuvert.telephone)}\r\n                target=\"_blank\" rel=\"noreferrer\"\r\n              >\r\n                <MessageSquare className=\"w-4 h-4\"/> SMS\r\n              </a>\r\n              <a\r\n                className={cx(\"inline-flex items-center justify-center gap-2 px-3 py-2 rounded-xl border\",\r\n                  prospectOuvert.telephone?\"\":\"opacity-40 pointer-events-none\")}\r\n                href={lienWA(prospectOuvert.telephone, `Bonjour ${prospectOuvert.nomComplet?.split(' ')[0]||''}, je vous contacte suite à votre demande. On se parle ?`)}\r\n                target=\"_blank\" rel=\"noreferrer\"\r\n              >\r\n                <MessageSquare className=\"w-4 h-4\"/> WhatsApp\r\n              </a>\r\n              <button\r\n                className=\"inline-flex items-center justify-center gap-2 px-3 py-2 rounded-xl border\"\r\n                onClick={()=>creerRDVICS(prospectOuvert)}\r\n              >\r\n                <Calendar className=\"w-4 h-4\"/> Créer RDV (.ics)\r\n              </button>\r\n            </div>\r\n\r\n            {/* Statut & méta */}\r\n            <div className=\"mt-4 flex items-center gap-2\">\r\n              <button className=\"px-3 py-2 rounded-xl border\" onClick={()=>deplacerStatut(prospectOuvert, -1)}>← Précédent</button>\r\n              <button className=\"px-3 py-2 rounded-xl border\" onClick={()=>deplacerStatut(prospectOuvert, +1)}>Suivant →</button>\r\n              <div className=\"ml-auto text-sm\">Score <span className=\"px-2 py-1 rounded-lg bg-neutral-100\">{prospectOuvert.score}</span></div>\r\n            </div>\r\n\r\n            {/* RGPD + dates */}\r\n            <div className=\"mt-4 text-xs text-neutral-500\">\r\n              Consentement RGPD: <b>{prospectOuvert.consentement ? \"Oui\" : \"Non\"}</b> —{\" \"}\r\n              <button className=\"underline\" onClick={()=>mettreAJourProspect(prospectOuvert.id, { consentement: !prospectOuvert.consentement })}>\r\n                basculer\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"mt-4 flex items-center justify-between text-xs text-neutral-500\">\r\n              <div>Dernier contact: {prospectOuvert.dernierContact ? new Date(prospectOuvert.dernierContact).toLocaleString(\"fr-FR\") : \"—\"}</div>\r\n              <div>Prochaine action: {prospectOuvert.prochaineAction ? `${joursRestants(prospectOuvert.prochaineAction)} j` : \"—\"}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <footer className=\"max-w-7xl mx-auto px-4 py-8 text-xs text-neutral-500\">\r\n        © {new Date().getFullYear()} Redweyne — CRM bonus d’inscription. Fait pour décrocher des mandats à partir de leads à 20€.\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* ====== Composants UI ====== */\r\nfunction KPI({ icone:Icone, etiquette, valeur, sousTexte, aide }) {\r\n  return (\r\n    <div className=\"bg-white rounded-2xl shadow-sm border p-4\" title={aide || \"\"}>\r\n      <div className=\"flex items-center gap-2 text-neutral-500 text-xs\"><Icone className=\"w-4 h-4\"/> {etiquette}</div>\r\n      <div className=\"text-2xl font-semibold mt-1\">{valeur}</div>\r\n      <div className=\"text-xs text-neutral-500\">{sousTexte}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CarteKPI({ titre, aide, children }) {\r\n  return (\r\n    <div className=\"bg-white rounded-2xl shadow-sm border p-4\" title={aide || \"\"}>\r\n      <div className=\"flex items-center gap-2 text-neutral-500 text-xs\"><InfoIcon className=\"w-4 h-4\"/> {titre}</div>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LigneLibelle({ libelle, children }) {\r\n  return (\r\n    <div className=\"mt-2\">\r\n      <div className=\"text-xs text-neutral-500 mb-1\">{libelle}</div>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction BlocInfo({ icone:Icone, libelle, valeur, lien }) {\r\n  const contenu = (\r\n    <div className=\"border rounded-xl p-3 flex items-center gap-2\">\r\n      <Icone className=\"w-4 h-4 text-neutral-500\"/>\r\n      <div>\r\n        <div className=\"text-xs text-neutral-500\">{libelle}</div>\r\n        <div className=\"text-sm\">{valeur}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n  return lien ? <a href={lien} target=\"_blank\" rel=\"noreferrer\">{contenu}</a> : contenu;\r\n}\r\n\r\nfunction Template({ etiquette, children }) {\r\n  const [copie, setCopie] = useState(false);\r\n  return (\r\n    <div className=\"border rounded-2xl p-3\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"font-medium text-sm\">{etiquette}</div>\r\n        <button\r\n          onClick={async()=>{ await navigator.clipboard.writeText(children); setCopie(true); setTimeout(()=>setCopie(false), 1200); }}\r\n          className=\"text-xs px-2 py-1 rounded-lg border\"\r\n        >{copie?\"Copié!\":\"Copier\"}</button>\r\n      </div>\r\n      <pre className=\"mt-2 text-xs whitespace-pre-wrap\">{children}</pre>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":56459},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"redweyne-crm-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !user.isActive || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Ce nom d'utilisateur existe déjà\" });\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3117},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initializeDemoData } from \"./init-demo\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize demo data on startup\n  await initializeDemoData();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2186},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertProspectSchema } from \"@shared/schema\";\n\nexport function registerRoutes(app: Express): Server {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Prospects API routes\n  app.get(\"/api/prospects\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const agentId = req.query.agentId as string || req.user!.id;\n      const prospects = await storage.getProspects(agentId);\n      res.json(prospects);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/prospects\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const validatedData = insertProspectSchema.parse({\n        ...req.body,\n        agentId: req.body.agentId || req.user!.id,\n      });\n      \n      const prospect = await storage.createProspect(validatedData);\n      res.status(201).json(prospect);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.put(\"/api/prospects/:id\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const { id } = req.params;\n      const updates = req.body;\n      \n      const prospect = await storage.updateProspect(id, updates);\n      if (!prospect) {\n        return res.status(404).json({ message: \"Prospect non trouvé\" });\n      }\n      \n      res.json(prospect);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.delete(\"/api/prospects/:id\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const { id } = req.params;\n      const deleted = await storage.deleteProspect(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Prospect non trouvé\" });\n      }\n      \n      res.sendStatus(204);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":2100},"server/storage.ts":{"content":"import { users, prospects, type User, type InsertUser, type Prospect, type InsertProspect } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Prospects\n  getProspects(agentId?: string): Promise<Prospect[]>;\n  getProspectById(id: string): Promise<Prospect | undefined>;\n  createProspect(prospect: InsertProspect): Promise<Prospect>;\n  updateProspect(id: string, updates: Partial<InsertProspect>): Promise<Prospect | undefined>;\n  deleteProspect(id: string): Promise<boolean>;\n  \n  sessionStore: session.Store;\n}\n\nexport class DatabaseStorage implements IStorage {\n  public sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        role: \"agent\"\n      })\n      .returning();\n    return user;\n  }\n\n  async getProspects(agentId?: string): Promise<Prospect[]> {\n    if (agentId && agentId !== \"rwd\") {\n      return await db.select().from(prospects).where(eq(prospects.agentId, agentId));\n    }\n    return await db.select().from(prospects);\n  }\n\n  async getProspectById(id: string): Promise<Prospect | undefined> {\n    const [prospect] = await db.select().from(prospects).where(eq(prospects.id, id));\n    return prospect || undefined;\n  }\n\n  async createProspect(insertProspect: InsertProspect): Promise<Prospect> {\n    const [prospect] = await db\n      .insert(prospects)\n      .values({\n        ...insertProspect,\n        score: this.calculateScore(insertProspect),\n      })\n      .returning();\n    return prospect;\n  }\n\n  async updateProspect(id: string, updates: Partial<InsertProspect>): Promise<Prospect | undefined> {\n    const [prospect] = await db\n      .update(prospects)\n      .set({\n        ...updates,\n        score: updates.statut ? this.calculateScore(updates as InsertProspect) : undefined,\n      })\n      .where(eq(prospects.id, id))\n      .returning();\n    return prospect || undefined;\n  }\n\n  async deleteProspect(id: string): Promise<boolean> {\n    const result = await db.delete(prospects).where(eq(prospects.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  private calculateScore(prospect: Partial<InsertProspect>): number {\n    let score = 50;\n    if (prospect.type === \"Vendeur\") score += 10;\n    if (prospect.timeline?.includes(\"<\")) score += 10;\n    if (prospect.motivation && prospect.motivation.length > 20) score += 5;\n    if (prospect.consentement) score += 5;\n    if (prospect.statut === \"RDV fixé\") score += 8;\n    if (prospect.statut === \"Mandat signé\") score += 15;\n    if (prospect.statut === \"Gagné\") score += 10;\n    if (prospect.statut === \"Perdu\" || prospect.statut === \"Pas de réponse\") score -= 15;\n    score += Math.min(Math.floor((prospect.budget || 0) / 100000), 10);\n    return Math.max(0, Math.min(100, score));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":3729},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, integer, timestamp, real, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull().default(\"agent\"), // \"admin\" or \"agent\"\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const prospects = pgTable(\"prospects\", {\n  id: varchar(\"id\").primaryKey(),\n  creeLe: timestamp(\"cree_le\").defaultNow(),\n  nomComplet: text(\"nom_complet\"),\n  telephone: text(\"telephone\"),\n  email: text(\"email\"),\n  type: text(\"type\"), // \"Vendeur\" or \"Acheteur\"\n  ville: text(\"ville\"),\n  typeBien: text(\"type_bien\"),\n  budget: integer(\"budget\").default(0),\n  prixEstime: integer(\"prix_estime\").default(0),\n  tauxHonoraires: real(\"taux_honoraires\").default(0.04),\n  exclusif: boolean(\"exclusif\").default(false),\n  motivation: text(\"motivation\"),\n  timeline: text(\"timeline\"),\n  intention: text(\"intention\"),\n  source: text(\"source\"),\n  exactSource: text(\"exact_source\"), // Detailed source tracking\n  consentement: boolean(\"consentement\").default(false),\n  statut: text(\"statut\").default(\"Nouveau\"), // Now includes \"Mandate Pending\", \"Mandate Signed\", \"Won\", \"Lost\", \"In Negotiation\"\n  dernierContact: timestamp(\"dernier_contact\"),\n  prochaineAction: timestamp(\"prochaine_action\"),\n  agentId: varchar(\"agent_id\").references(() => users.id),\n  adresse: text(\"adresse\"),\n  notes: text(\"notes\"),\n  score: integer(\"score\").default(50),\n  agentOutcome: text(\"agent_outcome\"), // \"signed\", \"lost\", \"in_negotiation\"\n  isHotLead: boolean(\"is_hot_lead\").default(false),\n  leadCost: real(\"lead_cost\").default(0), // Cost of acquiring this lead\n  estimatedClosingDays: integer(\"estimated_closing_days\"), // Days to close\n  contactHistory: jsonb(\"contact_history\").default([]), // Array of contact interactions\n  priceHistory: jsonb(\"price_history\").default([]), // For tracking price changes\n});\n\n// New table for contact interactions\nexport const contactInteractions = pgTable(\"contact_interactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prospectId: varchar(\"prospect_id\").references(() => prospects.id),\n  agentId: varchar(\"agent_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // \"call\", \"email\", \"sms\", \"meeting\", \"note\"\n  description: text(\"description\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  outcome: text(\"outcome\"), // \"positive\", \"neutral\", \"negative\"\n});\n\n// Agency settings table for branding\nexport const agencySettings = pgTable(\"agency_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agencyName: text(\"agency_name\").notNull(),\n  logo: text(\"logo\"), // URL or base64\n  primaryColor: text(\"primary_color\").default(\"#3b82f6\"),\n  secondaryColor: text(\"secondary_color\").default(\"#64748b\"),\n  customFont: text(\"custom_font\"),\n  isDemoMode: boolean(\"is_demo_mode\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const prospectsRelations = relations(prospects, ({ one, many }) => ({\n  agent: one(users, {\n    fields: [prospects.agentId],\n    references: [users.id],\n  }),\n  interactions: many(contactInteractions),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  prospects: many(prospects),\n  interactions: many(contactInteractions),\n}));\n\nexport const contactInteractionsRelations = relations(contactInteractions, ({ one }) => ({\n  prospect: one(prospects, {\n    fields: [contactInteractions.prospectId],\n    references: [prospects.id],\n  }),\n  agent: one(users, {\n    fields: [contactInteractions.agentId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  name: true,\n  email: true,\n});\n\nexport const insertProspectSchema = createInsertSchema(prospects).omit({\n  creeLe: true,\n  score: true,\n});\n\n// Schema types\nexport const insertContactInteractionSchema = createInsertSchema(contactInteractions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAgencySettingsSchema = createInsertSchema(agencySettings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertProspect = z.infer<typeof insertProspectSchema>;\nexport type Prospect = typeof prospects.$inferSelect;\nexport type InsertContactInteraction = z.infer<typeof insertContactInteractionSchema>;\nexport type ContactInteraction = typeof contactInteractions.$inferSelect;\nexport type InsertAgencySettings = z.infer<typeof insertAgencySettingsSchema>;\nexport type AgencySettings = typeof agencySettings.$inferSelect;\n","size_bytes":5058},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport LandingPage from \"@/pages/landing-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport CrmDashboard from \"@/pages/crm-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/crm\" component={CrmDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1081},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(219 87% 52%);\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-50: hsl(219 100% 96%);\n  --primary-100: hsl(219 96% 89%);\n  --primary-500: hsl(219 87% 52%);\n  --primary-600: hsl(219 84% 46%);\n  --primary-700: hsl(219 84% 36%);\n  --primary-800: hsl(219 84% 26%);\n  --primary-900: hsl(219 84% 16%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(219 87% 52%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(219 87% 52%);\n  --chart-1: hsl(219 87% 52%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(219 87% 52%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(219 87% 52%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(219 87% 52%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(219 87% 52% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(219 87% 52% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 1px 2px -1px hsl(219 87% 52% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 1px 2px -1px hsl(219 87% 52% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 2px 4px -1px hsl(219 87% 52% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 4px 6px -1px hsl(219 87% 52% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 8px 10px -1px hsl(219 87% 52% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(219 87% 52% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(219 87% 52%);\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-50: hsl(219 30% 15%);\n  --primary-100: hsl(219 35% 20%);\n  --primary-500: hsl(219 87% 52%);\n  --primary-600: hsl(219 84% 46%);\n  --primary-700: hsl(219 84% 36%);\n  --primary-800: hsl(219 84% 26%);\n  --primary-900: hsl(219 84% 16%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(219 87% 52%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(219 87% 52%);\n  --chart-1: hsl(219 87% 52%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(219 87% 52%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(219 87% 52%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(219 87% 52%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(219 87% 52% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(219 87% 52% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 1px 2px -1px hsl(219 87% 52% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 1px 2px -1px hsl(219 87% 52% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 2px 4px -1px hsl(219 87% 52% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 4px 6px -1px hsl(219 87% 52% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(219 87% 52% / 0.00), 0px 8px 10px -1px hsl(219 87% 52% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(219 87% 52% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer utilities {\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(var(--primary-700)) 0%, hsl(var(--primary-500)) 100%);\n  }\n\n  .card-hover {\n    transition: all 0.3s ease;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .kanban-column {\n    min-height: 400px;\n  }\n\n  .prospect-card {\n    transition: all 0.2s ease;\n  }\n\n  .prospect-card:hover {\n    box-shadow: 0 8px 25px -5px rgba(0,0,0,0.1);\n  }\n\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n","size_bytes":7844},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Home, Shield, Users, TrendingUp } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, navigate] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  useEffect(() => {\n    if (user) {\n      navigate(\"/crm\");\n    }\n  }, [user, navigate]);\n\n  const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    loginMutation.mutate({\n      username: formData.get(\"username\") as string,\n      password: formData.get(\"password\") as string,\n    });\n  };\n\n  const handleRegister = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    registerMutation.mutate({\n      username: formData.get(\"username\") as string,\n      password: formData.get(\"password\") as string,\n      name: formData.get(\"name\") as string,\n      email: formData.get(\"email\") as string,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\" data-testid=\"auth-page\">\n      {/* Left Side - Forms */}\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate(\"/\")}\n              className=\"mb-4\"\n              data-testid=\"button-back-home\"\n            >\n              <Home className=\"w-4 h-4 mr-2\" />\n              Retour au site\n            </Button>\n            <h2 className=\"text-3xl font-bold text-gray-900\" data-testid=\"auth-title\">\n              Accès Agent CRM\n            </h2>\n            <p className=\"mt-2 text-gray-600\" data-testid=\"auth-description\">\n              Gérez vos prospects et performances immobilières\n            </p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Connexion</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Inscription</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle data-testid=\"login-title\">Se connecter</CardTitle>\n                  <CardDescription data-testid=\"login-description\">\n                    Entrez vos identifiants pour accéder au CRM\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\" data-testid=\"form-login\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Identifiant</Label>\n                      <Input\n                        id=\"login-username\"\n                        name=\"username\"\n                        type=\"text\"\n                        required\n                        placeholder=\"Votre identifiant\"\n                        data-testid=\"input-login-username\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Mot de passe</Label>\n                      <Input\n                        id=\"login-password\"\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        placeholder=\"Votre mot de passe\"\n                        data-testid=\"input-login-password\"\n                      />\n                    </div>\n                    \n                    {loginMutation.error && (\n                      <Alert variant=\"destructive\" data-testid=\"alert-login-error\">\n                        <AlertDescription>\n                          {loginMutation.error.message}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-submit-login\"\n                    >\n                      {loginMutation.isPending && (\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      )}\n                      Se connecter\n                    </Button>\n                  </form>\n                  \n                  {/* Demo Credentials */}\n                  <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\" data-testid=\"demo-credentials\">\n                    <p className=\"text-sm text-blue-800 font-medium mb-2\">Identifiants de démonstration :</p>\n                    <div className=\"space-y-1 text-sm text-blue-700\">\n                      <p>👤 <strong>alice.martin</strong> / 🔑 <strong>demo123</strong></p>\n                      <p>👤 <strong>ben.leroy</strong> / 🔑 <strong>demo123</strong></p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle data-testid=\"register-title\">Créer un compte</CardTitle>\n                  <CardDescription data-testid=\"register-description\">\n                    Inscrivez-vous pour accéder au CRM RedLead2Guide\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleRegister} className=\"space-y-4\" data-testid=\"form-register\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-name\">Nom complet</Label>\n                      <Input\n                        id=\"register-name\"\n                        name=\"name\"\n                        type=\"text\"\n                        required\n                        placeholder=\"Votre nom complet\"\n                        data-testid=\"input-register-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-email\">Email</Label>\n                      <Input\n                        id=\"register-email\"\n                        name=\"email\"\n                        type=\"email\"\n                        required\n                        placeholder=\"votre@email.fr\"\n                        data-testid=\"input-register-email\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">Identifiant</Label>\n                      <Input\n                        id=\"register-username\"\n                        name=\"username\"\n                        type=\"text\"\n                        required\n                        placeholder=\"Votre identifiant\"\n                        data-testid=\"input-register-username\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">Mot de passe</Label>\n                      <Input\n                        id=\"register-password\"\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        placeholder=\"Votre mot de passe\"\n                        data-testid=\"input-register-password\"\n                      />\n                    </div>\n\n                    {registerMutation.error && (\n                      <Alert variant=\"destructive\" data-testid=\"alert-register-error\">\n                        <AlertDescription>\n                          {registerMutation.error.message}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-submit-register\"\n                    >\n                      {registerMutation.isPending && (\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      )}\n                      Créer mon compte\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right Side - Hero */}\n      <div className=\"hidden lg:block lg:flex-1 bg-gradient-to-br from-primary-600 to-primary-800 text-white\">\n        <div className=\"flex flex-col justify-center px-8 lg:px-12\">\n          <div className=\"max-w-md\">\n            <h3 className=\"text-3xl font-bold mb-6\" data-testid=\"hero-auth-title\">\n              CRM Immobilier Professionnel\n            </h3>\n            <p className=\"text-lg text-blue-100 mb-8\" data-testid=\"hero-auth-description\">\n              Optimisez votre activité immobilière avec des outils pensés pour les professionnels français.\n            </p>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-4 h-4\" />\n                </div>\n                <span>Gestion complète des prospects</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-4 h-4\" />\n                </div>\n                <span>KPI et analytics en temps réel</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-4 h-4\" />\n                </div>\n                <span>Sécurisé et conforme RGPD</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10776},"client/src/pages/crm-dashboard.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { \n  Plus, Download, Upload, FileText, User, \n  Clock, Euro, Crown, Calendar, Phone, MessageSquare,\n  BarChart3, Users, TrendingUp, Star, Home, LogOut,\n  Search, Filter, Info\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest, getQueryFn } from \"@/lib/queryClient\";\nimport type { Prospect } from \"@shared/schema\";\n\nimport KpiCard from \"@/components/crm/kpi-card\";\nimport ProspectTable from \"@/components/crm/prospect-table\";\nimport PipelineBoard from \"@/components/crm/pipeline-board\";\nimport ProspectForm from \"@/components/crm/prospect-form\";\nimport DemoBanner from \"@/components/crm/demo-banner\";\nimport ROICalculator from \"@/components/crm/roi-calculator\";\nimport ContactTimeline from \"@/components/crm/contact-timeline\";\nimport HotLeadBadge from \"@/components/crm/hot-lead-badge\";\nimport DarkModeToggle from \"@/components/crm/dark-mode-toggle\";\nimport NotificationsPanel from \"@/components/crm/notifications-panel\";\n\nexport default function CrmDashboard() {\n  const { user, logoutMutation } = useAuth();\n  const [, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  \n  const [selectedAgentId, setSelectedAgentId] = useState(user?.id || \"\");\n  const [activeTab, setActiveTab] = useState(\"tableau\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"Tous\");\n  const [statusFilter, setStatusFilter] = useState(\"Tous\");\n  const [selectedProspect, setSelectedProspect] = useState<Prospect | null>(null);\n  const [showProspectForm, setShowProspectForm] = useState(false);\n  const [sortBy, setSortBy] = useState(\"date\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n  const [showCallToday, setShowCallToday] = useState(false);\n  const [minBudget, setMinBudget] = useState(\"\");\n  const [maxBudget, setMaxBudget] = useState(\"\");\n\n  // Fetch prospects\n  const { data: prospects = [], isLoading } = useQuery<Prospect[]>({\n    queryKey: [\"/api/prospects\", selectedAgentId],\n    queryFn: () => getQueryFn({ on401: \"throw\" })(`/api/prospects?agentId=${selectedAgentId}`),\n    staleTime: 0, // Always refetch to ensure fresh data\n    refetchOnMount: true,\n  });\n\n  // Mutations\n  const createProspectMutation = useMutation({\n    mutationFn: async (data: Partial<Prospect>) => {\n      const res = await apiRequest(\"POST\", \"/api/prospects\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prospects\"] });\n      toast({ title: \"Prospect créé avec succès\" });\n      setShowProspectForm(false);\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Erreur lors de la création\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const updateProspectMutation = useMutation({\n    mutationFn: async ({ id, ...data }: Partial<Prospect> & { id: string }) => {\n      const res = await apiRequest(\"PUT\", `/api/prospects/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prospects\"] });\n      toast({ title: \"Prospect mis à jour\" });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Erreur lors de la mise à jour\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteProspectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/prospects/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prospects\"] });\n      toast({ title: \"Prospect supprimé\" });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Erreur lors de la suppression\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Filtered and sorted prospects\n  const filteredProspects = useMemo(() => {\n    let filtered = prospects.filter(prospect => {\n      const matchesSearch = !searchQuery || \n        [prospect.nomComplet, prospect.telephone, prospect.email, prospect.ville, prospect.exactSource]\n          .filter(Boolean)\n          .some(field => field?.toLowerCase().includes(searchQuery.toLowerCase()));\n      \n      const matchesType = typeFilter === \"Tous\" || prospect.type === typeFilter;\n      const matchesStatus = statusFilter === \"Tous\" || prospect.statut === statusFilter;\n      \n      // Budget filter\n      const prospectBudget = prospect.budget || prospect.prixEstime || 0;\n      const matchesMinBudget = !minBudget || prospectBudget >= parseInt(minBudget);\n      const matchesMaxBudget = !maxBudget || prospectBudget <= parseInt(maxBudget);\n      \n      // Call today filter - prospects that need to be contacted today\n      if (showCallToday) {\n        const today = new Date().toDateString();\n        const needsCall = prospect.prochaineAction && \n          new Date(prospect.prochaineAction).toDateString() === today &&\n          ![\"Gagné\", \"Perdu\", \"Pas de réponse\"].includes(prospect.statut || \"\");\n        \n        if (!needsCall) return false;\n      }\n      \n      return matchesSearch && matchesType && matchesStatus && matchesMinBudget && matchesMaxBudget;\n    });\n\n    // Sorting\n    filtered.sort((a, b) => {\n      let aValue, bValue;\n      \n      switch (sortBy) {\n        case \"value\":\n          aValue = (a.budget || a.prixEstime || 0) * (a.tauxHonoraires || 0.04);\n          bValue = (b.budget || b.prixEstime || 0) * (b.tauxHonoraires || 0.04);\n          break;\n        case \"score\":\n          aValue = a.score || 0;\n          bValue = b.score || 0;\n          break;\n        case \"name\":\n          aValue = a.nomComplet || \"\";\n          bValue = b.nomComplet || \"\";\n          break;\n        case \"date\":\n        default:\n          aValue = new Date(a.creeLe || 0).getTime();\n          bValue = new Date(b.creeLe || 0).getTime();\n          break;\n      }\n      \n      if (typeof aValue === \"string\" && typeof bValue === \"string\") {\n        return sortOrder === \"asc\" ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n      }\n      \n      const numA = typeof aValue === \"number\" ? aValue : 0;\n      const numB = typeof bValue === \"number\" ? bValue : 0;\n      return sortOrder === \"asc\" ? numA - numB : numB - numA;\n    });\n\n    return filtered;\n  }, [prospects, searchQuery, typeFilter, statusFilter, minBudget, maxBudget, showCallToday, sortBy, sortOrder]);\n\n  // KPI calculations\n  const kpis = useMemo(() => {\n    const today = new Date().toDateString();\n    const newToday = prospects.filter(p => new Date(p.creeLe!).toDateString() === today).length;\n    const rdvCount = prospects.filter(p => p.statut === \"RDV fixé\").length;\n    const wonCount = prospects.filter(p => p.statut === \"Gagné\").length;\n    const conversionRate = prospects.length > 0 ? Math.round((wonCount / prospects.length) * 100) : 0;\n\n    // Calculate SLA (average response time)\n    const responses = prospects\n      .filter(p => p.dernierContact && p.creeLe)\n      .map(p => new Date(p.dernierContact!).getTime() - new Date(p.creeLe!).getTime())\n      .filter(time => time > 0);\n    \n    const avgSlaMs = responses.length > 0 ? responses.reduce((a, b) => a + b) / responses.length : 0;\n    const avgSlaMinutes = Math.round(avgSlaMs / (1000 * 60));\n\n    // Pipeline value calculation\n    const pipelineValue = prospects\n      .filter(p => [\"Qualifié\", \"RDV fixé\", \"Mandat signé\", \"Gagné\"].includes(p.statut!))\n      .reduce((sum, p) => {\n        const price = p.prixEstime || p.budget || 0;\n        const rate = p.tauxHonoraires || 0.04;\n        const probability = getStatusProbability(p.statut!);\n        const exclusiveBonus = p.exclusif ? 1.1 : 1;\n        return sum + (price * rate * probability * exclusiveBonus);\n      }, 0);\n\n    const exclusiveCount = prospects.filter(p => p.exclusif).length;\n\n    // RDV in next 7 days\n    const next7Days = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\n    const upcomingRdv = prospects.filter(p => \n      p.prochaineAction && \n      new Date(p.prochaineAction) <= next7Days &&\n      p.statut === \"RDV fixé\"\n    ).length;\n\n    return {\n      newToday,\n      rdvCount,\n      wonCount,\n      conversionRate,\n      avgSlaMinutes,\n      pipelineValue,\n      exclusiveCount,\n      upcomingRdv\n    };\n  }, [prospects]);\n\n  // Chart data (last 7 days activity)\n  const chartData = useMemo(() => {\n    const days = Array.from({ length: 7 }, (_, i) => {\n      const date = new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000);\n      const dayName = date.toLocaleDateString(\"fr-FR\", { weekday: \"short\" });\n      \n      const created = prospects.filter(p => \n        new Date(p.creeLe!).toDateString() === date.toDateString()\n      ).length;\n      \n      return {\n        name: dayName,\n        \"Créés\": created,\n        \"Contactés\": prospects.filter(p => p.statut === \"Contacté\").length,\n        \"RDV\": prospects.filter(p => p.statut === \"RDV fixé\").length,\n      };\n    });\n    return days;\n  }, [prospects]);\n\n  // Helper functions\n  const getStatusProbability = (status: string): number => {\n    const probabilities: Record<string, number> = {\n      \"Nouveau\": 0.05,\n      \"Contacté\": 0.1,\n      \"Qualifié\": 0.25,\n      \"RDV fixé\": 0.5,\n      \"Mandat signé\": 0.9,\n      \"Gagné\": 1,\n      \"Perdu\": 0,\n      \"Pas de réponse\": 0.02,\n    };\n    return probabilities[status] || 0;\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"fr-FR\", {\n      style: \"currency\",\n      currency: \"EUR\",\n    }).format(value);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const exportCSV = () => {\n    const headers = [\"Nom\", \"Type\", \"Statut\", \"Téléphone\", \"Email\", \"Ville\", \"Valeur\"];\n    const csvData = filteredProspects.map(p => [\n      p.nomComplet || \"\",\n      p.type || \"\",\n      p.statut || \"\",\n      p.telephone || \"\",\n      p.email || \"\",\n      p.ville || \"\",\n      p.prixEstime || p.budget || 0\n    ]);\n    \n    const csvContent = [headers, ...csvData]\n      .map(row => row.map(field => `\"${field}\"`).join(\",\"))\n      .join(\"\\n\");\n    \n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `prospects_${new Date().toISOString().slice(0, 10)}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-gray-600\">Chargement du tableau de bord...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\" data-testid=\"crm-dashboard\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-20 bg-white/90 backdrop-blur border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-9 h-9 rounded-2xl bg-primary text-white grid place-items-center font-bold\">\n              RL\n            </div>\n            <div>\n              <div className=\"font-semibold leading-tight\" data-testid=\"header-title\">\n                RedLead2Guide CRM — Leads Immobiliers\n              </div>\n              <div className=\"text-xs text-gray-500\" data-testid=\"header-subtitle\">\n                CRM moderne • Orienté mandat\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center gap-2 bg-gray-100 dark:bg-gray-800 rounded-xl px-3 py-2\">\n              <User className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" />\n              <span className=\"text-sm dark:text-gray-200\" data-testid=\"current-user\">\n                {user?.name}\n              </span>\n            </div>\n\n            <NotificationsPanel prospects={prospects} />\n\n            <DarkModeToggle />\n\n            <Button\n              onClick={exportCSV}\n              variant=\"outline\"\n              size=\"sm\"\n              data-testid=\"button-export-csv\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              CSV\n            </Button>\n\n            <Button\n              onClick={() => setShowProspectForm(true)}\n              size=\"sm\"\n              data-testid=\"button-new-prospect\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nouveau\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate(\"/\")}\n              size=\"sm\"\n              data-testid=\"button-back-home\"\n            >\n              <Home className=\"w-4 h-4 mr-2\" />\n              Site\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              size=\"sm\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Déconnexion\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Demo Banner */}\n        <DemoBanner />\n        \n        {/* KPI Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <KpiCard\n            title=\"Leads aujourd'hui\"\n            value={kpis.newToday}\n            subtitle=\"nouveaux\"\n            icon={Plus}\n            trend={kpis.newToday > 0 ? \"up\" : \"neutral\"}\n          />\n          <KpiCard\n            title=\"RDV fixés\"\n            value={kpis.rdvCount}\n            subtitle=\"pipeline actif\"\n            icon={Calendar}\n            trend={kpis.rdvCount > 0 ? \"up\" : \"neutral\"}\n          />\n          <KpiCard\n            title=\"Gagnés\"\n            value={kpis.wonCount}\n            subtitle=\"mandats\"\n            icon={Star}\n            trend={kpis.wonCount > 0 ? \"up\" : \"neutral\"}\n          />\n          <KpiCard\n            title=\"Taux de conv.\"\n            value={`${kpis.conversionRate}%`}\n            subtitle=\"global\"\n            icon={TrendingUp}\n            trend={kpis.conversionRate > 20 ? \"up\" : kpis.conversionRate > 10 ? \"neutral\" : \"down\"}\n          />\n        </div>\n\n        {/* Enhanced KPIs */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium flex items-center\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                SLA Moyen\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"kpi-sla\">\n                {kpis.avgSlaMinutes > 0 ? `${kpis.avgSlaMinutes} min` : \"—\"}\n              </div>\n              <p className=\"text-xs text-gray-500\">Temps de 1ère réponse</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium flex items-center\">\n                <Euro className=\"w-4 h-4 mr-2\" />\n                Valeur Pipeline\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"kpi-pipeline\">\n                {formatCurrency(kpis.pipelineValue)}\n              </div>\n              <p className=\"text-xs text-gray-500\">€ attendus (pondérés)</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium flex items-center\">\n                <Crown className=\"w-4 h-4 mr-2\" />\n                Exclusivités\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"kpi-exclusives\">\n                {kpis.exclusiveCount}\n              </div>\n              <p className=\"text-xs text-gray-500\">Mandats exclusifs</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium flex items-center\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                RDV (7j)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"kpi-upcoming-rdv\">\n                {kpis.upcomingRdv}\n              </div>\n              <p className=\"text-xs text-gray-500\">À venir</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Activity Chart */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Activité 7 jours</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis allowDecimals={false} />\n                  <Tooltip />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"Créés\" \n                    stroke=\"hsl(var(--primary))\"\n                    strokeWidth={2}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"Contactés\" \n                    stroke=\"hsl(var(--chart-2))\"\n                    strokeWidth={2}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"RDV\" \n                    stroke=\"hsl(var(--chart-3))\"\n                    strokeWidth={2}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"tableau\" data-testid=\"tab-tableau\">Tableau Agent</TabsTrigger>\n            <TabsTrigger value=\"opportunites\" data-testid=\"tab-opportunites\">Opportunités</TabsTrigger>\n            <TabsTrigger value=\"pipeline\" data-testid=\"tab-pipeline\">Pipeline</TabsTrigger>\n            <TabsTrigger value=\"prospects\" data-testid=\"tab-prospects\">Prospects</TabsTrigger>\n            <TabsTrigger value=\"scripts\" data-testid=\"tab-scripts\">Scripts</TabsTrigger>\n            <TabsTrigger value=\"parametres\" data-testid=\"tab-parametres\">Paramètres</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"tableau\">\n            <div className=\"text-center py-8\">\n              <BarChart3 className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <p className=\"text-gray-600\">Les KPIs sont affichés dans les cartes ci-dessus</p>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"opportunites\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Opportunités Prioritaires</CardTitle>\n                <CardDescription>\n                  Prospects avec forte valeur attendue ou RDV imminent\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {filteredProspects.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Info className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                    <p className=\"text-gray-600\">Aucune opportunité selon les critères</p>\n                  </div>\n                ) : (\n                  <ProspectTable \n                    prospects={filteredProspects}\n                    onEdit={(prospect) => {\n                      setSelectedProspect(prospect);\n                      setShowProspectForm(true);\n                    }}\n                    onDelete={(id) => deleteProspectMutation.mutate(id)}\n                    compact\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"pipeline\">\n            <PipelineBoard \n              prospects={filteredProspects}\n              onUpdateStatus={(id, status) => \n                updateProspectMutation.mutate({ id, statut: status })\n              }\n            />\n          </TabsContent>\n\n          <TabsContent value=\"prospects\">\n            <div className=\"space-y-4\">\n              {/* Enhanced Search and Filters */}\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-4\">\n                    {/* Search and Quick Actions */}\n                    <div className=\"flex flex-col md:flex-row gap-4\">\n                      <div className=\"flex-1 relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                        <Input\n                          placeholder=\"Rechercher par nom, téléphone, email, ville, source exacte...\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          className=\"pl-10\"\n                        />\n                      </div>\n                      \n                      <Button\n                        variant={showCallToday ? \"default\" : \"outline\"}\n                        onClick={() => setShowCallToday(!showCallToday)}\n                        className=\"gap-2\"\n                      >\n                        <Phone className=\"w-4 h-4\" />\n                        Appels du jour ({prospects.filter(p => {\n                          const today = new Date().toDateString();\n                          return p.prochaineAction && \n                            new Date(p.prochaineAction).toDateString() === today &&\n                            ![\"Gagné\", \"Perdu\", \"Pas de réponse\"].includes(p.statut || \"\");\n                        }).length})\n                      </Button>\n                    </div>\n\n                    {/* Advanced Filters */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\n                      <Select value={typeFilter} onValueChange={setTypeFilter}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Tous\">Tous types</SelectItem>\n                          <SelectItem value=\"Vendeur\">Vendeurs</SelectItem>\n                          <SelectItem value=\"Acheteur\">Acheteurs</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Select value={statusFilter} onValueChange={setStatusFilter}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Tous\">Tous statuts</SelectItem>\n                          <SelectItem value=\"Nouveau\">Nouveau</SelectItem>\n                          <SelectItem value=\"Contacté\">Contacté</SelectItem>\n                          <SelectItem value=\"Qualifié\">Qualifié</SelectItem>\n                          <SelectItem value=\"RDV fixé\">RDV fixé</SelectItem>\n                          <SelectItem value=\"Mandate Pending\">Mandat en attente</SelectItem>\n                          <SelectItem value=\"Mandat signé\">Mandat signé</SelectItem>\n                          <SelectItem value=\"En négociation\">En négociation</SelectItem>\n                          <SelectItem value=\"Gagné\">Gagné</SelectItem>\n                          <SelectItem value=\"Perdu\">Perdu</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Budget min\"\n                        value={minBudget}\n                        onChange={(e) => setMinBudget(e.target.value)}\n                      />\n\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Budget max\"\n                        value={maxBudget}\n                        onChange={(e) => setMaxBudget(e.target.value)}\n                      />\n\n                      <Select value={sortBy} onValueChange={setSortBy}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"date\">Par date</SelectItem>\n                          <SelectItem value=\"value\">Par valeur (€)</SelectItem>\n                          <SelectItem value=\"score\">Par score</SelectItem>\n                          <SelectItem value=\"name\">Par nom</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Select value={sortOrder} onValueChange={setSortOrder}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"desc\">Décroissant</SelectItem>\n                          <SelectItem value=\"asc\">Croissant</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Filter Results Summary */}\n                    <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                      <span>\n                        {filteredProspects.length} prospect{filteredProspects.length !== 1 ? 's' : ''} \n                        {searchQuery || typeFilter !== \"Tous\" || statusFilter !== \"Tous\" || minBudget || maxBudget || showCallToday \n                          ? ` (filtré${filteredProspects.length !== 1 ? 's' : ''} sur ${prospects.length})`\n                          : ''\n                        }\n                      </span>\n                      \n                      {(searchQuery || typeFilter !== \"Tous\" || statusFilter !== \"Tous\" || minBudget || maxBudget || showCallToday) && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSearchQuery(\"\");\n                            setTypeFilter(\"Tous\");\n                            setStatusFilter(\"Tous\");\n                            setMinBudget(\"\");\n                            setMaxBudget(\"\");\n                            setShowCallToday(false);\n                          }}\n                          className=\"text-gray-500 hover:text-gray-700\"\n                        >\n                          Réinitialiser filtres\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* ROI Calculator */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <ROICalculator prospects={filteredProspects} />\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Clock className=\"w-5 h-5\" />\n                      Estimation de clôture\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {filteredProspects.filter(p => p.estimatedClosingDays && ![\"Gagné\", \"Perdu\"].includes(p.statut || \"\")).slice(0, 5).map(prospect => (\n                        <div key={prospect.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                              <span className=\"text-sm font-medium text-blue-700\">\n                                {prospect.nomComplet?.charAt(0) || \"?\"}\n                              </span>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{prospect.nomComplet}</p>\n                              <p className=\"text-sm text-gray-500\">{prospect.ville}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">{prospect.estimatedClosingDays || 30} jours</p>\n                            <p className=\"text-sm text-gray-500\">estimé</p>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {filteredProspects.filter(p => ![\"Gagné\", \"Perdu\"].includes(p.statut || \"\")).length === 0 && (\n                        <p className=\"text-center text-gray-500 py-4\">Aucun prospect en cours</p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Prospects Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Liste des prospects</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ProspectTable \n                    prospects={filteredProspects}\n                    onEdit={(prospect) => {\n                      setSelectedProspect(prospect);\n                      setShowProspectForm(true);\n                    }}\n                    onDelete={(id) => deleteProspectMutation.mutate(id)}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"scripts\">\n            <div className=\"grid gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Premier Contact Vendeur</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-gray-50 rounded-lg p-4 font-mono text-sm space-y-2\">\n                    <p>\"Bonjour [Nom], c'est [Votre nom] de l'agence Redweyne.\"</p>\n                    <p>\"Vous avez récemment fait une demande d'estimation pour votre [type de bien] à [ville].\"</p>\n                    <p>\"Je vous appelle car nous avons actuellement une forte demande sur ce secteur...\"</p>\n                    <p className=\"text-gray-600 italic\">→ Objectif: Fixer un RDV d'estimation</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Premier Contact Acheteur</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-gray-50 rounded-lg p-4 font-mono text-sm space-y-2\">\n                    <p>\"Bonjour [Nom], c'est [Votre nom] de l'agence Redweyne.\"</p>\n                    <p>\"Vous recherchez un [type de bien] secteur [zone] dans un budget de [budget]€.\"</p>\n                    <p>\"J'ai peut-être quelque chose qui va vous intéresser...\"</p>\n                    <p className=\"text-gray-600 italic\">→ Objectif: Qualifier le besoin et fixer une visite</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"parametres\">\n            <div className=\"grid gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Profil Agent</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">Nom complet</label>\n                      <p className=\"text-gray-600\">{user?.name}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Email</label>\n                      <p className=\"text-gray-600\">{user?.email}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Identifiant</label>\n                      <p className=\"text-gray-600\">{user?.username}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Conformité RGPD</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center p-4 bg-green-50 rounded-lg\">\n                      <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                        <Users className=\"w-4 h-4 text-green-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-green-900\">Données sécurisées</p>\n                        <p className=\"text-sm text-green-700\">Hébergement français, chiffrement SSL</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      {/* Prospect Form Modal */}\n      {showProspectForm && (\n        <ProspectForm\n          prospect={selectedProspect}\n          onSave={(data) => {\n            if (selectedProspect) {\n              updateProspectMutation.mutate({ ...data, id: selectedProspect.id });\n            } else {\n              createProspectMutation.mutate(data);\n            }\n          }}\n          onCancel={() => {\n            setShowProspectForm(false);\n            setSelectedProspect(null);\n          }}\n          isLoading={createProspectMutation.isPending || updateProspectMutation.isPending}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":34944},"client/src/pages/landing-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { \n  Users, TrendingUp, Calendar, ShieldCheck, Zap, Smartphone, \n  Phone, Mail, BarChart3, Check, ArrowRight, Star\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function LandingPage() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    if (user) {\n      navigate(\"/crm\");\n    }\n  }, [user, navigate]);\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\" data-testid=\"landing-page\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 w-full bg-white/90 backdrop-blur-sm border-b border-gray-200 z-50\" data-testid=\"navigation\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-2xl font-bold text-primary-700\" data-testid=\"logo\">RedLead2Guide</h1>\n            </div>\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-8\">\n                <button \n                  onClick={() => scrollToSection(\"services\")} \n                  className=\"text-gray-600 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors\"\n                  data-testid=\"link-services\"\n                >\n                  Services\n                </button>\n                <button \n                  onClick={() => scrollToSection(\"avantages\")} \n                  className=\"text-gray-600 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors\"\n                  data-testid=\"link-avantages\"\n                >\n                  Avantages\n                </button>\n                <button \n                  onClick={() => scrollToSection(\"contact\")} \n                  className=\"text-gray-600 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors\"\n                  data-testid=\"link-contact\"\n                >\n                  Contact\n                </button>\n                <Button \n                  onClick={() => navigate(\"/auth\")} \n                  className=\"bg-primary-600 hover:bg-primary-700 text-white\"\n                  data-testid=\"button-login\"\n                >\n                  Connexion Agent\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-16 pb-20 bg-gradient-to-br from-primary-700 to-primary-500 text-white\" data-testid=\"hero-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20\">\n          <div className=\"text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold mb-6 animate-fade-in\" data-testid=\"hero-title\">\n              CRM Immobilier\n              <span className=\"block text-blue-200\">Nouvelle Génération</span>\n            </h1>\n            <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto text-blue-100\" data-testid=\"hero-description\">\n              Gérez vos prospects, optimisez vos mandats et boostez vos performances commerciales avec notre solution 100% française\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={() => navigate(\"/auth\")} \n                className=\"bg-white text-primary-700 px-8 py-4 rounded-xl text-lg font-semibold hover:bg-blue-50 transition-colors\"\n                size=\"lg\"\n                data-testid=\"button-dashboard\"\n              >\n                Voir mon tableau de bord\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n              <Button \n                onClick={() => scrollToSection(\"services\")} \n                variant=\"outline\"\n                className=\"border-2 border-white/80 text-white bg-transparent px-8 py-4 rounded-xl text-lg font-semibold hover:bg-white hover:text-primary-700 transition-all duration-300 backdrop-blur-sm\"\n                size=\"lg\"\n                data-testid=\"button-services\"\n              >\n                Découvrir nos services\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section id=\"services\" className=\"py-20 bg-white\" data-testid=\"services-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"services-title\">Nos Services</h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\" data-testid=\"services-description\">\n              Des outils professionnels pour optimiser votre activité immobilière\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-gray-50 rounded-2xl p-8 transition-all duration-300 hover:-translate-y-1 hover:shadow-lg\" data-testid=\"service-prospects\">\n              <div className=\"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-6\">\n                <Users className=\"w-6 h-6 text-primary-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Gestion des Prospects</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Centralisez tous vos contacts et suivez leur progression dans votre pipeline commercial avec notre système de scoring automatique.\n              </p>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Scoring automatique\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Suivi des interactions\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Alertes de relance\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"bg-gray-50 rounded-2xl p-8 transition-all duration-300 hover:-translate-y-1 hover:shadow-lg\" data-testid=\"service-analytics\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-6\">\n                <TrendingUp className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">KPI & Analytics</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Suivez vos performances en temps réel avec des indicateurs métier adaptés à l'immobilier français.\n              </p>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Valeur du pipeline\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Taux de conversion\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  SLA de réponse\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"bg-gray-50 rounded-2xl p-8 transition-all duration-300 hover:-translate-y-1 hover:shadow-lg\" data-testid=\"service-automation\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-6\">\n                <Calendar className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Automatisation</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Automatisez vos tâches répétitives et ne ratez plus aucune opportunité commerciale.\n              </p>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Relances automatiques\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Export PDF/CSV\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                  Création RDV (.ics)\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Advantages Section */}\n      <section id=\"avantages\" className=\"py-20 bg-gray-50\" data-testid=\"advantages-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\" data-testid=\"advantages-title\">Pourquoi choisir Redweyne ?</h2>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <div className=\"w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center mr-4 mt-1\">\n                    <ShieldCheck className=\"w-4 h-4 text-primary-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">100% Français & RGPD</h3>\n                    <p className=\"text-gray-600\">\n                      Solution développée en France, conforme RGPD avec hébergement sécurisé de vos données clients.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-4 mt-1\">\n                    <Zap className=\"w-4 h-4 text-green-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Interface Intuitive</h3>\n                    <p className=\"text-gray-600\">\n                      Design moderne et ergonomique pensé pour les professionnels de l'immobilier en France.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center mr-4 mt-1\">\n                    <Smartphone className=\"w-4 h-4 text-purple-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Mobile-First</h3>\n                    <p className=\"text-gray-600\">\n                      Accédez à vos prospects et KPI depuis n'importe quel appareil, même en déplacement.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"bg-white rounded-2xl shadow-2xl p-6 transform rotate-2\">\n                <div className=\"bg-gray-100 rounded-lg h-48 mb-4 flex items-center justify-center\">\n                  <BarChart3 className=\"w-16 h-16 text-gray-400\" />\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  <div className=\"flex space-x-2\">\n                    <div className=\"h-8 bg-primary-100 rounded flex-1\"></div>\n                    <div className=\"h-8 bg-green-100 rounded flex-1\"></div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"absolute inset-0 bg-white rounded-2xl shadow-xl p-6 transform -rotate-1 -z-10\">\n                <div className=\"bg-gray-100 rounded-lg h-48 mb-4\"></div>\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-4/5\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 bg-white\" data-testid=\"contact-section\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-6\" data-testid=\"contact-title\">Prêt à booster vos ventes ?</h2>\n          <p className=\"text-xl text-gray-600 mb-8\" data-testid=\"contact-description\">\n            Rejoignez les agents immobiliers qui nous font confiance\n          </p>\n          <Button \n            onClick={() => navigate(\"/auth\")} \n            className=\"bg-primary-600 hover:bg-primary-700 text-white px-8 py-4 rounded-xl text-lg font-semibold transition-all duration-300 hover:-translate-y-1 hover:shadow-lg\"\n            size=\"lg\"\n            data-testid=\"button-crm-access\"\n          >\n            Accéder à mon CRM\n            <Star className=\"ml-2 h-5 w-5\" />\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\" data-testid=\"footer\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div>\n              <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"footer-brand\">RedLead2Guide</h3>\n              <p className=\"text-gray-300\" data-testid=\"footer-tagline\">\n                CRM immobilier français pour les professionnels exigeants.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\" data-testid=\"footer-features-title\">Fonctionnalités</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li data-testid=\"footer-feature-1\">Gestion des prospects</li>\n                <li data-testid=\"footer-feature-2\">Pipeline commercial</li>\n                <li data-testid=\"footer-feature-3\">KPI & Analytics</li>\n                <li data-testid=\"footer-feature-4\">Export & Automatisation</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\" data-testid=\"footer-contact-title\">Contact</h4>\n              <div className=\"space-y-2 text-gray-300\">\n                <p className=\"flex items-center\" data-testid=\"footer-email\">\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  support@redweyne.fr\n                </p>\n                <p className=\"flex items-center\" data-testid=\"footer-phone\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  +33 1 23 45 67 89\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p data-testid=\"footer-copyright\">&copy; 2024 RedLead2Guide. Tous droits réservés. Conforme RGPD.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":15506},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/crm/kpi-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LucideIcon, TrendingUp, TrendingDown, Minus } from \"lucide-react\";\n\ninterface KpiCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  icon: LucideIcon;\n  trend?: \"up\" | \"down\" | \"neutral\";\n  trendValue?: string;\n}\n\nexport default function KpiCard({ \n  title, \n  value, \n  subtitle, \n  icon: Icon, \n  trend = \"neutral\",\n  trendValue \n}: KpiCardProps) {\n  const getTrendIcon = () => {\n    switch (trend) {\n      case \"up\":\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case \"down\":\n        return <TrendingDown className=\"w-4 h-4\" />;\n      default:\n        return <Minus className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTrendColor = () => {\n    switch (trend) {\n      case \"up\":\n        return \"text-green-600\";\n      case \"down\":\n        return \"text-red-600\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  return (\n    <Card className=\"transition-all duration-200 hover:shadow-md\" data-testid={`kpi-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-sm font-medium flex items-center gap-2 text-gray-600\">\n          <Icon className=\"w-4 h-4\" />\n          {title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-2xl font-bold text-gray-900\" data-testid={`kpi-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </div>\n            {subtitle && (\n              <div className=\"text-xs text-gray-500 mt-1\" data-testid={`kpi-subtitle-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                {subtitle}\n              </div>\n            )}\n          </div>\n          {trendValue && (\n            <div className={`flex items-center gap-1 text-sm ${getTrendColor()}`}>\n              {getTrendIcon()}\n              <span>{trendValue}</span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2139},"client/src/components/crm/pipeline-board.tsx":{"content":"import { useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  User, \n  MapPin, \n  Building2, \n  Euro, \n  Crown, \n  Phone, \n  MessageSquare, \n  Calendar, \n  ChevronLeft, \n  ChevronRight \n} from \"lucide-react\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface PipelineBoardProps {\n  prospects: Prospect[];\n  onUpdateStatus: (id: string, status: string) => void;\n}\n\nconst STATUSES = [\n  \"Nouveau\",\n  \"Contacté\", \n  \"Qualifié\",\n  \"RDV fixé\",\n  \"Mandat signé\",\n  \"Gagné\"\n];\n\nconst STATUS_COLORS: Record<string, string> = {\n  \"Nouveau\": \"bg-gray-100 border-gray-200\",\n  \"Contacté\": \"bg-blue-50 border-blue-200\",\n  \"Qualifié\": \"bg-green-50 border-green-200\",\n  \"RDV fixé\": \"bg-orange-50 border-orange-200\",\n  \"Mandat signé\": \"bg-purple-50 border-purple-200\",\n  \"Gagné\": \"bg-emerald-50 border-emerald-200\",\n};\n\nconst STATUS_BADGE_COLORS: Record<string, string> = {\n  \"Nouveau\": \"bg-gray-200 text-gray-700\",\n  \"Contacté\": \"bg-blue-200 text-blue-700\",\n  \"Qualifié\": \"bg-green-200 text-green-700\", \n  \"RDV fixé\": \"bg-orange-200 text-orange-700\",\n  \"Mandat signé\": \"bg-purple-200 text-purple-700\",\n  \"Gagné\": \"bg-emerald-200 text-emerald-700\",\n};\n\nexport default function PipelineBoard({ prospects, onUpdateStatus }: PipelineBoardProps) {\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"fr-FR\", { \n      style: \"currency\", \n      currency: \"EUR\",\n      minimumFractionDigits: 0 \n    }).format(value);\n  };\n\n  const columns = useMemo(() => {\n    const cols: Record<string, Prospect[]> = {};\n    STATUSES.forEach(status => {\n      cols[status] = prospects.filter(p => p.statut === status);\n    });\n    return cols;\n  }, [prospects]);\n\n  const moveProspect = (prospect: Prospect, direction: 1 | -1) => {\n    const currentIndex = STATUSES.indexOf(prospect.statut!);\n    const newIndex = currentIndex + direction;\n    \n    if (newIndex >= 0 && newIndex < STATUSES.length) {\n      onUpdateStatus(prospect.id, STATUSES[newIndex]);\n    }\n  };\n\n  const createPhoneLink = (phone: string) => `tel:${phone?.replace(/\\s+/g, \"\")}`;\n  const createSMSLink = (phone: string) => `sms:${phone?.replace(/\\s+/g, \"\")}`;\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\" data-testid=\"pipeline-board\">\n      {STATUSES.map((status) => (\n        <div key={status} className={`rounded-xl p-4 min-h-[500px] ${STATUS_COLORS[status]}`}>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-900\" data-testid={`column-title-${status}`}>\n              {status}\n            </h3>\n            <Badge \n              className={STATUS_BADGE_COLORS[status]} \n              data-testid={`column-count-${status}`}\n            >\n              {columns[status]?.length || 0}\n            </Badge>\n          </div>\n          \n          <div className=\"space-y-3\" data-testid={`column-prospects-${status}`}>\n            {columns[status]?.map((prospect) => (\n              <Card \n                key={prospect.id} \n                className=\"cursor-pointer transition-all duration-200 hover:shadow-md border-gray-200 bg-white\"\n                data-testid={`prospect-card-${prospect.id}`}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-gray-900 text-sm line-clamp-1\" data-testid={`prospect-name-${prospect.id}`}>\n                      {prospect.nomComplet || \"Sans nom\"}\n                    </h4>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => moveProspect(prospect, -1)}\n                        disabled={STATUSES.indexOf(prospect.statut!) === 0}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid={`button-move-back-${prospect.id}`}\n                      >\n                        <ChevronLeft className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => moveProspect(prospect, 1)}\n                        disabled={STATUSES.indexOf(prospect.statut!) === STATUSES.length - 1}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid={`button-move-forward-${prospect.id}`}\n                      >\n                        <ChevronRight className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-xs text-gray-600 mb-3 line-clamp-2\" data-testid={`prospect-motivation-${prospect.id}`}>\n                    {prospect.motivation || \"Aucune motivation renseignée\"}\n                  </p>\n                  \n                  <div className=\"text-xs text-gray-500 mb-3 space-y-1\">\n                    <div className=\"flex items-center\" data-testid={`prospect-location-${prospect.id}`}>\n                      <MapPin className=\"w-3 h-3 mr-1\" />\n                      {prospect.ville || \"—\"}\n                    </div>\n                    <div className=\"flex items-center\" data-testid={`prospect-property-${prospect.id}`}>\n                      <Building2 className=\"w-3 h-3 mr-1\" />\n                      {prospect.typeBien || \"—\"}\n                    </div>\n                    <div className=\"flex items-center\" data-testid={`prospect-price-${prospect.id}`}>\n                      <Euro className=\"w-3 h-3 mr-1\" />\n                      {formatCurrency(prospect.prixEstime || prospect.budget || 0)}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-1\">\n                      {prospect.exclusif && (\n                        <Badge \n                          variant=\"outline\" \n                          className=\"text-purple-600 border-purple-200 bg-purple-50 text-xs\"\n                          data-testid={`prospect-exclusive-${prospect.id}`}\n                        >\n                          <Crown className=\"w-3 h-3 mr-1\" />\n                          Excl.\n                        </Badge>\n                      )}\n                      <Badge \n                        variant=\"outline\" \n                        className=\"text-xs\"\n                        data-testid={`prospect-score-${prospect.id}`}\n                      >\n                        {prospect.score}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex space-x-1\">\n                      {prospect.telephone && (\n                        <>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => window.open(createPhoneLink(prospect.telephone!), \"_self\")}\n                            title=\"Appeler\"\n                            className=\"h-6 w-6 p-0\"\n                            data-testid={`button-call-${prospect.id}`}\n                          >\n                            <Phone className=\"w-3 h-3 text-green-600\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => window.open(createSMSLink(prospect.telephone!), \"_self\")}\n                            title=\"SMS\"\n                            className=\"h-6 w-6 p-0\"\n                            data-testid={`button-sms-${prospect.id}`}\n                          >\n                            <MessageSquare className=\"w-3 h-3 text-blue-600\" />\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {prospect.prochaineAction && (\n                    <div className=\"mt-2 pt-2 border-t border-gray-100\">\n                      <div className=\"flex items-center text-xs text-gray-500\" data-testid={`prospect-next-action-${prospect.id}`}>\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {new Date(prospect.prochaineAction).toLocaleDateString(\"fr-FR\")}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n\n            {columns[status]?.length === 0 && (\n              <div className=\"text-center text-gray-400 py-8\" data-testid={`empty-column-${status}`}>\n                <User className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">Aucun prospect</p>\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":9071},"client/src/components/crm/prospect-form.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Loader2, Save, X } from \"lucide-react\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface ProspectFormProps {\n  prospect: Prospect | null;\n  onSave: (data: Partial<Prospect>) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nconst prospectSchema = z.object({\n  id: z.string().optional(),\n  nomComplet: z.string().min(1, \"Le nom est requis\"),\n  telephone: z.string().optional(),\n  email: z.string().email(\"Email invalide\").optional().or(z.literal(\"\")),\n  type: z.enum([\"Vendeur\", \"Acheteur\"]),\n  ville: z.string().optional(),\n  typeBien: z.string().optional(),\n  budget: z.number().min(0).optional(),\n  prixEstime: z.number().min(0).optional(),\n  tauxHonoraires: z.number().min(0).max(1).optional(),\n  exclusif: z.boolean().optional(),\n  motivation: z.string().optional(),\n  timeline: z.string().optional(),\n  intention: z.string().optional(),\n  source: z.string().optional(),\n  consentement: z.boolean().optional(),\n  statut: z.string().optional(),\n  adresse: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype ProspectFormData = z.infer<typeof prospectSchema>;\n\nconst STATUSES = [\n  \"Nouveau\",\n  \"Contacté\",\n  \"Qualifié\", \n  \"RDV fixé\",\n  \"Mandat signé\",\n  \"Gagné\",\n  \"Perdu\",\n  \"Pas de réponse\"\n];\n\nconst TIMELINES = [\n  \"< 1 mois\",\n  \"1-3 mois\",\n  \"3-6 mois\",\n  \"6-12 mois\",\n  \"> 12 mois\"\n];\n\nexport default function ProspectForm({ prospect, onSave, onCancel, isLoading = false }: ProspectFormProps) {\n  const isEdit = !!prospect;\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n    watch,\n  } = useForm<ProspectFormData>({\n    resolver: zodResolver(prospectSchema),\n    defaultValues: {\n      nomComplet: \"\",\n      telephone: \"\",\n      email: \"\",\n      type: \"Vendeur\",\n      ville: \"\",\n      typeBien: \"Appartement\",\n      budget: 0,\n      prixEstime: 0,\n      tauxHonoraires: 0.04,\n      exclusif: false,\n      motivation: \"\",\n      timeline: \"3-6 mois\",\n      intention: \"\",\n      source: \"Ajout manuel\",\n      consentement: false,\n      statut: \"Nouveau\",\n      adresse: \"\",\n      notes: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (prospect) {\n      // Reset form with prospect data\n      reset({\n        ...prospect,\n        budget: prospect.budget || 0,\n        prixEstime: prospect.prixEstime || 0,\n        tauxHonoraires: prospect.tauxHonoraires || 0.04,\n        exclusif: prospect.exclusif || false,\n        consentement: prospect.consentement || false,\n        nomComplet: prospect.nomComplet || \"\",\n        telephone: prospect.telephone || \"\",\n        email: prospect.email || \"\",\n        ville: prospect.ville || \"\",\n        typeBien: prospect.typeBien || \"\",\n        motivation: prospect.motivation || \"\",\n        timeline: prospect.timeline || \"\",\n        intention: prospect.intention || \"\",\n        source: prospect.source || \"\",\n        statut: prospect.statut || \"Nouveau\",\n        adresse: prospect.adresse || \"\",\n        notes: prospect.notes || \"\",\n      });\n    }\n  }, [prospect, reset]);\n\n  const onSubmit = (data: ProspectFormData) => {\n    // Generate ID for new prospects\n    const prospectData = {\n      ...data,\n      id: isEdit ? prospect.id : `P-${Math.floor(Math.random() * 9000 + 1000)}`,\n      creeLe: isEdit ? prospect.creeLe : new Date().toISOString(),\n    };\n\n    onSave(prospectData);\n  };\n\n  const typeValue = watch(\"type\");\n\n  return (\n    <Dialog open={true} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"prospect-form\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"form-title\">\n            {isEdit ? \"Modifier le prospect\" : \"Nouveau prospect\"}\n          </DialogTitle>\n          <DialogDescription data-testid=\"form-description\">\n            {isEdit ? \"Modifiez les informations du prospect\" : \"Ajoutez un nouveau prospect à votre pipeline\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Informations de base</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nomComplet\">Nom complet *</Label>\n                <Input\n                  id=\"nomComplet\"\n                  {...register(\"nomComplet\")}\n                  placeholder=\"Prénom Nom\"\n                  data-testid=\"input-nom-complet\"\n                />\n                {errors.nomComplet && (\n                  <p className=\"text-sm text-red-600\" data-testid=\"error-nom-complet\">\n                    {errors.nomComplet.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">Type</Label>\n                <Select\n                  value={typeValue}\n                  onValueChange={(value) => setValue(\"type\", value as \"Vendeur\" | \"Acheteur\")}\n                >\n                  <SelectTrigger data-testid=\"select-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Vendeur\">Vendeur</SelectItem>\n                    <SelectItem value=\"Acheteur\">Acheteur</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"telephone\">Téléphone</Label>\n                <Input\n                  id=\"telephone\"\n                  {...register(\"telephone\")}\n                  placeholder=\"+33 6 12 34 56 78\"\n                  data-testid=\"input-telephone\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...register(\"email\")}\n                  placeholder=\"contact@example.com\"\n                  data-testid=\"input-email\"\n                />\n                {errors.email && (\n                  <p className=\"text-sm text-red-600\" data-testid=\"error-email\">\n                    {errors.email.message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Property Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Bien immobilier</h3>\n            \n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"ville\">Ville</Label>\n                <Input\n                  id=\"ville\"\n                  {...register(\"ville\")}\n                  placeholder=\"Nantes\"\n                  data-testid=\"input-ville\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"typeBien\">Type de bien</Label>\n                <Select\n                  value={watch(\"typeBien\")}\n                  onValueChange={(value) => setValue(\"typeBien\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-type-bien\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Appartement\">Appartement</SelectItem>\n                    <SelectItem value=\"Maison\">Maison</SelectItem>\n                    <SelectItem value=\"Terrain\">Terrain</SelectItem>\n                    <SelectItem value=\"Commercial\">Commercial</SelectItem>\n                    <SelectItem value=\"Immeuble\">Immeuble</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"timeline\">Délai</Label>\n                <Select\n                  value={watch(\"timeline\")}\n                  onValueChange={(value) => setValue(\"timeline\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-timeline\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {TIMELINES.map((timeline) => (\n                      <SelectItem key={timeline} value={timeline}>\n                        {timeline}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              {typeValue === \"Acheteur\" ? (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"budget\">Budget (€)</Label>\n                  <Input\n                    id=\"budget\"\n                    type=\"number\"\n                    {...register(\"budget\", { valueAsNumber: true })}\n                    placeholder=\"450000\"\n                    data-testid=\"input-budget\"\n                  />\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"prixEstime\">Prix estimé (€)</Label>\n                  <Input\n                    id=\"prixEstime\"\n                    type=\"number\"\n                    {...register(\"prixEstime\", { valueAsNumber: true })}\n                    placeholder=\"320000\"\n                    data-testid=\"input-prix-estime\"\n                  />\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tauxHonoraires\">Taux honoraires</Label>\n                <Input\n                  id=\"tauxHonoraires\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  max=\"1\"\n                  {...register(\"tauxHonoraires\", { valueAsNumber: true })}\n                  placeholder=\"0.04\"\n                  data-testid=\"input-taux-honoraires\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"statut\">Statut</Label>\n                <Select\n                  value={watch(\"statut\")}\n                  onValueChange={(value) => setValue(\"statut\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-statut\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {STATUSES.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Additional Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Informations complémentaires</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"source\">Source</Label>\n                <Input\n                  id=\"source\"\n                  {...register(\"source\")}\n                  placeholder=\"Google Ads - Landing\"\n                  data-testid=\"input-source\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"intention\">Intention</Label>\n                <Input\n                  id=\"intention\"\n                  {...register(\"intention\")}\n                  placeholder=\"Estimation + mise en vente\"\n                  data-testid=\"input-intention\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"adresse\">Adresse</Label>\n              <Input\n                id=\"adresse\"\n                {...register(\"adresse\")}\n                placeholder=\"Rue, quartier...\"\n                data-testid=\"input-adresse\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"motivation\">Motivation</Label>\n              <Textarea\n                id=\"motivation\"\n                {...register(\"motivation\")}\n                placeholder=\"Déménagement professionnel en septembre...\"\n                rows={3}\n                data-testid=\"textarea-motivation\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\">Notes</Label>\n              <Textarea\n                id=\"notes\"\n                {...register(\"notes\")}\n                placeholder=\"Très réactif, préfère appel le midi...\"\n                rows={2}\n                data-testid=\"textarea-notes\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"exclusif\"\n                  checked={watch(\"exclusif\")}\n                  onCheckedChange={(checked) => setValue(\"exclusif\", checked)}\n                  data-testid=\"switch-exclusif\"\n                />\n                <Label htmlFor=\"exclusif\">Mandat exclusif</Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"consentement\"\n                  checked={watch(\"consentement\")}\n                  onCheckedChange={(checked) => setValue(\"consentement\", checked)}\n                  data-testid=\"switch-consentement\"\n                />\n                <Label htmlFor=\"consentement\">Consentement RGPD</Label>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              disabled={isLoading}\n              data-testid=\"button-cancel\"\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              Annuler\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isLoading}\n              data-testid=\"button-save\"\n            >\n              {isLoading && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n              <Save className=\"w-4 h-4 mr-2\" />\n              {isEdit ? \"Sauvegarder\" : \"Créer\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15168},"client/src/components/crm/prospect-table.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Phone, \n  MessageSquare, \n  MessageCircle, \n  Calendar, \n  Edit, \n  Trash2, \n  User, \n  Crown,\n  AlertTriangle,\n  FileDown,\n  ExternalLink\n} from \"lucide-react\";\nimport HotLeadBadge from \"./hot-lead-badge\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface ProspectTableProps {\n  prospects: Prospect[];\n  onEdit: (prospect: Prospect) => void;\n  onDelete: (id: string) => void;\n  compact?: boolean;\n}\n\nexport default function ProspectTable({ prospects, onEdit, onDelete, compact = false }: ProspectTableProps) {\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"fr-FR\", {\n      style: \"currency\",\n      currency: \"EUR\",\n      minimumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      \"Nouveau\": \"bg-gray-100 text-gray-800\",\n      \"Contacté\": \"bg-blue-100 text-blue-800\",\n      \"Qualifié\": \"bg-green-100 text-green-800\",\n      \"RDV fixé\": \"bg-orange-100 text-orange-800\",\n      \"Mandate Pending\": \"bg-yellow-100 text-yellow-800\", // New status\n      \"Mandat signé\": \"bg-purple-100 text-purple-800\",\n      \"Mandate Signed\": \"bg-purple-100 text-purple-800\", // Alternative naming\n      \"En négociation\": \"bg-amber-100 text-amber-800\",\n      \"Gagné\": \"bg-emerald-100 text-emerald-800\",\n      \"Won\": \"bg-emerald-100 text-emerald-800\",\n      \"Perdu\": \"bg-red-100 text-red-800\",\n      \"Lost\": \"bg-red-100 text-red-800\",\n      \"Pas de réponse\": \"bg-gray-100 text-gray-600\",\n    };\n    return colors[status] || \"bg-gray-100 text-gray-800\";\n  };\n\n  // WhatsApp link generator\n  const generateWhatsAppLink = (prospect: Prospect) => {\n    const message = `Bonjour ${prospect.nomComplet}, je suis votre agent immobilier concernant votre projet ${prospect.type?.toLowerCase()} à ${prospect.ville}. Budget: ${formatCurrency(prospect.budget || 0)}. Pouvons-nous discuter de votre projet ?`;\n    const phoneNumber = prospect.telephone?.replace(/\\s/g, '').replace(/\\+33/, '33');\n    return `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;\n  };\n\n  // Export PDF functionality\n  const exportProspectPDF = (prospect: Prospect) => {\n    // This would integrate with jsPDF\n    console.log(\"Exporting PDF for prospect:\", prospect.id);\n    // Implementation would go here\n  };\n\n  const getTypeColor = (type: string) => {\n    return type === \"Vendeur\" ? \"bg-blue-100 text-blue-800\" : \"bg-purple-100 text-purple-800\";\n  };\n\n  const calculateExpectedValue = (prospect: Prospect) => {\n    const price = prospect.prixEstime || prospect.budget || 0;\n    const rate = prospect.tauxHonoraires || 0.04;\n    const probability = getStatusProbability(prospect.statut!);\n    const exclusiveBonus = prospect.exclusif ? 1.1 : 1;\n    return price * rate * probability * exclusiveBonus;\n  };\n\n  const getStatusProbability = (status: string): number => {\n    const probabilities: Record<string, number> = {\n      \"Nouveau\": 0.05,\n      \"Contacté\": 0.1,\n      \"Qualifié\": 0.25,\n      \"RDV fixé\": 0.5,\n      \"Mandat signé\": 0.9,\n      \"Gagné\": 1,\n      \"Perdu\": 0,\n      \"Pas de réponse\": 0.02,\n    };\n    return probabilities[status] || 0;\n  };\n\n  const createPhoneLink = (phone: string) => `tel:${phone?.replace(/\\s+/g, \"\")}`;\n  const createSMSLink = (phone: string) => `sms:${phone?.replace(/\\s+/g, \"\")}`;\n  const createWhatsAppLink = (phone: string) => \n    `https://wa.me/${phone?.replace(/[\\s+\\-]/g, \"\")}`;\n\n  if (prospects.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"py-12\">\n          <div className=\"text-center\">\n            <User className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n            <p className=\"text-gray-600\">Aucun prospect trouvé</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (compact) {\n    return (\n      <div className=\"grid gap-4\" data-testid=\"prospect-cards\">\n        {prospects.map((prospect) => (\n          <Card key={prospect.id} className=\"transition-all duration-200 hover:shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center\">\n                    <User className=\"w-5 h-5 text-primary-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\" data-testid={`prospect-name-${prospect.id}`}>\n                      {prospect.nomComplet || \"Sans nom\"}\n                    </h3>\n                    <p className=\"text-sm text-gray-500\">\n                      {prospect.type} • {prospect.typeBien} • {prospect.ville}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-bold text-green-600\" data-testid={`prospect-value-${prospect.id}`}>\n                    {formatCurrency(calculateExpectedValue(prospect))}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Valeur attendue</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between text-sm text-gray-600 mb-4\">\n                <Badge className={getStatusColor(prospect.statut!)} data-testid={`prospect-status-${prospect.id}`}>\n                  {prospect.statut}\n                </Badge>\n                {prospect.exclusif && (\n                  <span className=\"flex items-center text-purple-600\">\n                    <Crown className=\"w-4 h-4 mr-1\" />\n                    Exclusif\n                  </span>\n                )}\n                <span data-testid={`prospect-score-${prospect.id}`}>Score: {prospect.score}</span>\n              </div>\n              \n              {prospect.motivation && (\n                <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\" data-testid={`prospect-motivation-${prospect.id}`}>\n                  {prospect.motivation}\n                </p>\n              )}\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-gray-500\">\n                  {prospect.prochaineAction ? (\n                    <span data-testid={`prospect-next-action-${prospect.id}`}>\n                      Prochaine action: {new Date(prospect.prochaineAction).toLocaleDateString(\"fr-FR\")}\n                    </span>\n                  ) : (\n                    \"Aucune action planifiée\"\n                  )}\n                </div>\n                <div className=\"flex space-x-1\">\n                  {prospect.telephone && (\n                    <>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(createPhoneLink(prospect.telephone!), \"_self\")}\n                        data-testid={`button-call-${prospect.id}`}\n                      >\n                        <Phone className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(createSMSLink(prospect.telephone!), \"_self\")}\n                        data-testid={`button-sms-${prospect.id}`}\n                      >\n                        <MessageSquare className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(createWhatsAppLink(prospect.telephone!), \"_blank\")}\n                        data-testid={`button-whatsapp-${prospect.id}`}\n                      >\n                        <MessageCircle className=\"w-4 h-4\" />\n                      </Button>\n                    </>\n                  )}\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => onEdit(prospect)}\n                    data-testid={`button-edit-${prospect.id}`}\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <Card data-testid=\"prospect-table\">\n      <CardHeader>\n        <CardTitle>Liste des Prospects ({prospects.length})</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Contact</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Statut</TableHead>\n                <TableHead>Valeur</TableHead>\n                <TableHead>Score</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {prospects.map((prospect) => (\n                <TableRow key={prospect.id} className=\"hover:bg-gray-50\">\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center\">\n                        <User className=\"w-5 h-5 text-primary-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-gray-900\" data-testid={`prospect-name-${prospect.id}`}>\n                          {prospect.nomComplet || \"Sans nom\"}\n                        </div>\n                        <div className=\"text-sm text-gray-500\" data-testid={`prospect-contact-${prospect.id}`}>\n                          {prospect.email && <div>{prospect.email}</div>}\n                          {prospect.telephone && <div>{prospect.telephone}</div>}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={getTypeColor(prospect.type!)} data-testid={`prospect-type-${prospect.id}`}>\n                      {prospect.type}\n                    </Badge>\n                    <div className=\"text-sm text-gray-500 mt-1\">\n                      {prospect.typeBien} • {prospect.ville}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={getStatusColor(prospect.statut!)} data-testid={`prospect-status-${prospect.id}`}>\n                      {prospect.statut}\n                    </Badge>\n                    {prospect.exclusif && (\n                      <div className=\"flex items-center text-purple-600 text-xs mt-1\">\n                        <Crown className=\"w-3 h-3 mr-1\" />\n                        Exclusif\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-medium text-gray-900\" data-testid={`prospect-value-${prospect.id}`}>\n                      {formatCurrency(calculateExpectedValue(prospect))}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      Prix: {formatCurrency(prospect.prixEstime || prospect.budget || 0)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-medium\" data-testid={`prospect-score-${prospect.id}`}>\n                        {prospect.score}\n                      </span>\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full ${\n                            prospect.score! >= 80 ? 'bg-green-500' : \n                            prospect.score! >= 60 ? 'bg-yellow-500' : 'bg-red-500'\n                          }`}\n                          style={{ width: `${Math.min(prospect.score!, 100)}%` }}\n                        />\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      {prospect.telephone ? (\n                        <>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => window.open(createPhoneLink(prospect.telephone!), \"_self\")}\n                            title=\"Appeler\"\n                            data-testid={`button-call-${prospect.id}`}\n                          >\n                            <Phone className=\"w-4 h-4 text-green-600\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => window.open(createSMSLink(prospect.telephone!), \"_self\")}\n                            title=\"SMS\"\n                            data-testid={`button-sms-${prospect.id}`}\n                          >\n                            <MessageSquare className=\"w-4 h-4 text-blue-600\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => window.open(createWhatsAppLink(prospect.telephone!), \"_blank\")}\n                            title=\"WhatsApp\"\n                            data-testid={`button-whatsapp-${prospect.id}`}\n                          >\n                            <MessageCircle className=\"w-4 h-4 text-green-600\" />\n                          </Button>\n                        </>\n                      ) : (\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          disabled\n                          title=\"Pas de téléphone\"\n                        >\n                          <AlertTriangle className=\"w-4 h-4 text-gray-400\" />\n                        </Button>\n                      )}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => onEdit(prospect)}\n                        title=\"Modifier\"\n                        data-testid={`button-edit-${prospect.id}`}\n                      >\n                        <Edit className=\"w-4 h-4 text-gray-600\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => onDelete(prospect.id)}\n                        title=\"Supprimer\"\n                        data-testid={`button-delete-${prospect.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-red-600\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15567},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"enhancement-roadmap.md":{"content":"# 🚀 Redweyne CRM Enhancement Roadmap\n\n## Priority 1: Business Intelligence Features\n### Lead Scoring Algorithm Enhancement\n- **AI-powered lead scoring**: Weight factors like timeline urgency, budget size, source quality\n- **Dynamic hot lead detection**: Auto-flag prospects based on behavior patterns\n- **Conversion probability calculator**: Predict closing likelihood using historical data\n\n### Advanced Analytics Dashboard\n- **Revenue forecasting**: Pipeline value projections based on historical conversion rates\n- **Source performance analysis**: ROI by lead source (Google Ads vs referrals vs cold calls)\n- **Agent performance metrics**: Conversion rates, average deal size, time to close\n- **Market trend analysis**: Price evolution, demand patterns by location\n\n## Priority 2: Automation & Workflow\n### Smart Follow-up System\n- **Automated call reminders**: Smart scheduling based on prospect timezone and preferences\n- **Email sequence automation**: Drip campaigns for nurturing prospects\n- **WhatsApp templates**: Pre-built messages for different prospect stages\n- **Task automation**: Auto-create follow-up tasks based on prospect interactions\n\n### Document Management\n- **Digital contract signing**: Integration with DocuSign/HelloSign\n- **Automated document generation**: Property valuations, mandate contracts, offer letters\n- **Client portal**: Secure area for clients to access documents and updates\n- **Photo/video management**: Property media organization and sharing\n\n## Priority 3: Integration & Communication\n### Communication Hub\n- **Unified inbox**: Email, SMS, WhatsApp messages in one place\n- **Call recording & transcription**: Automatic call logging with AI summaries\n- **Video meeting integration**: Zoom/Teams integration for virtual property tours\n- **Social media monitoring**: Track mentions and leads from Facebook, Instagram\n\n### Third-party Integrations\n- **Property data APIs**: SeLoger, LeBonCoin, ImmoViewer for market data\n- **Banking integrations**: Mortgage calculator, loan pre-approval status\n- **Mapping services**: Property location scoring, neighborhood insights\n- **Accounting software**: Automatic commission tracking, expense management\n\n## Priority 4: Mobile & User Experience\n### Mobile App Features\n- **Offline mode**: Work without internet, sync when connected\n- **GPS-based features**: Nearby prospects, property mapping, travel optimization\n- **Quick capture**: Voice memos, photo notes, instant prospect creation\n- **Push notifications**: Smart alerts for urgent prospects and appointments\n\n### Advanced UI/UX\n- **Drag & drop pipeline**: Visual prospect management like Trello\n- **Bulk actions**: Mass email, status updates, task assignment\n- **Customizable dashboards**: Personalized KPI widgets for each agent\n- **Voice commands**: \"Call my hot leads\", \"Show today's appointments\"\n\n## Priority 5: Reporting & Compliance\n### Advanced Reporting\n- **Custom report builder**: Create reports for any metric combination\n- **Automated reporting**: Weekly/monthly performance reports via email\n- **Client satisfaction tracking**: Post-transaction surveys and NPS scoring\n- **Market analysis reports**: Automatic market studies for client presentations\n\n### Compliance & Security\n- **GDPR compliance tools**: Data consent tracking, right to be forgotten\n- **Audit logging**: Complete activity history for compliance\n- **Role-based permissions**: Granular access control for different team members\n- **Data backup & recovery**: Automated backups with point-in-time recovery\n\n## Implementation Timeline\n\n### Week 1-2: Foundation\n- [ ] Enhanced lead scoring algorithm\n- [ ] Advanced analytics dashboard\n- [ ] Mobile express mode integration\n\n### Week 3-4: Automation\n- [ ] Smart follow-up system\n- [ ] WhatsApp integration\n- [ ] Email automation\n\n### Week 5-6: Integrations\n- [ ] Property data APIs\n- [ ] Communication hub\n- [ ] Document management\n\n### Week 7-8: Mobile & Polish\n- [ ] Mobile app optimization\n- [ ] Advanced reporting\n- [ ] Performance optimization\n\n## Success Metrics\n- **Lead conversion rate**: Target 25% improvement\n- **Time to close**: Reduce by 30%\n- **Agent productivity**: Increase by 40%\n- **Client satisfaction**: Achieve 90% NPS score\n- **Revenue per agent**: Increase by 50%\n\n## Technology Stack Recommendations\n- **AI/ML**: OpenAI API for lead scoring and insights\n- **Real-time features**: WebSocket integration for live updates\n- **Mobile**: Progressive Web App (PWA) for mobile experience\n- **Analytics**: Integration with Google Analytics 4\n- **Communication**: Twilio for SMS/WhatsApp, SendGrid for email","size_bytes":4587},"server/demo-data.ts":{"content":"import { nanoid } from \"nanoid\";\nimport type { InsertUser, InsertProspect } from \"@shared/schema\";\n\n// Demo users\nexport const demoUsers: InsertUser[] = [\n  {\n    username: \"admin\",\n    password: \"demo123\", // This will be hashed when inserted\n    name: \"Marie Dubois\",\n    email: \"marie@redweyne.fr\"\n  },\n  {\n    username: \"alice.martin\",\n    password: \"demo123\",\n    name: \"Alice Martin\",\n    email: \"alice.martin@redweyne.fr\"\n  },\n  {\n    username: \"ben.leroy\",\n    password: \"demo123\",\n    name: \"Ben Leroy\",\n    email: \"ben.leroy@redweyne.fr\"\n  }\n];\n\n// Demo prospects with realistic data\nexport const demoProspects: (Omit<InsertProspect, 'agentId'> & { \n  prochaineAction?: Date;\n  dernierContact?: Date;\n})[] = [\n  {\n    id: nanoid(),\n    nomComplet: \"Jean Dupont\",\n    telephone: \"06 12 34 56 78\",\n    email: \"jean.dupont@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Paris 15ème\",\n    typeBien: \"Appartement\",\n    budget: 0,\n    prixEstime: 450000,\n    tauxHonoraires: 0.04,\n    exclusif: true,\n    motivation: \"Déménagement professionnel\",\n    timeline: \"2 mois\",\n    intention: \"Vente rapide\",\n    source: \"Site web\",\n    exactSource: \"Google Ads - Estimation gratuite\",\n    consentement: true,\n    statut: \"Qualifié\",\n    adresse: \"12 rue de la Convention, 75015 Paris\",\n    notes: \"Client motivé, bien situé, exclusivité signée\",\n    score: 85,\n    agentOutcome: \"in_negotiation\",\n    leadCost: 45,\n    estimatedClosingDays: 60,\n    prochaineAction: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Tomorrow\n    dernierContact: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Marie Leroy\",\n    telephone: \"06 98 76 54 32\",\n    email: \"marie.leroy@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Neuilly-sur-Seine\",\n    typeBien: \"Maison\",\n    budget: 800000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: false,\n    motivation: \"Agrandissement familial\",\n    timeline: \"6 mois\",\n    intention: \"Recherche active\",\n    source: \"Recommandation\",\n    exactSource: \"Client référent - Jean Dupont\",\n    consentement: true,\n    statut: \"RDV fixé\",\n    adresse: \"\",\n    notes: \"Famille avec 2 enfants, recherche jardin\",\n    score: 75,\n    agentOutcome: \"signed\",\n    leadCost: 0,\n    estimatedClosingDays: 90,\n    prochaineAction: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // In 3 days\n    dernierContact: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // Yesterday\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Thomas Bernard\",\n    telephone: \"06 45 67 89 12\",\n    email: \"thomas.bernard@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Boulogne-Billancourt\",\n    typeBien: \"Studio\",\n    budget: 0,\n    prixEstime: 280000,\n    tauxHonoraires: 0.05,\n    exclusif: false,\n    motivation: \"Investissement locatif\",\n    timeline: \"1 mois\",\n    intention: \"Vente urgente\",\n    source: \"Facebook Ads\",\n    exactSource: \"Facebook Ads - Estimation rapide studio\",\n    consentement: true,\n    statut: \"Mandate Pending\",\n    adresse: \"8 avenue du Général Leclerc, 92100 Boulogne\",\n    notes: \"Investisseur, plusieurs biens, urgent\",\n    score: 92,\n    agentOutcome: \"in_negotiation\",\n    leadCost: 25,\n    estimatedClosingDays: 30,\n    prochaineAction: new Date(), // Today\n    dernierContact: new Date(Date.now() - 3 * 60 * 60 * 1000) // 3 hours ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Claire Moreau\",\n    telephone: \"06 11 22 33 44\",\n    email: \"claire.moreau@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Vincennes\",\n    typeBien: \"Appartement\",\n    budget: 550000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: true,\n    motivation: \"Premier achat\",\n    timeline: \"3 mois\",\n    intention: \"Recherche méthodique\",\n    source: \"Le Bon Coin\",\n    exactSource: \"Le Bon Coin - Annonce appartement Vincennes\",\n    consentement: true,\n    statut: \"Contacté\",\n    adresse: \"\",\n    notes: \"Primo-accédante, dossier solide, patient\",\n    score: 68,\n    leadCost: 12,\n    estimatedClosingDays: 120,\n    prochaineAction: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Day after tomorrow\n    dernierContact: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Philippe Durand\",\n    telephone: \"06 55 44 33 22\",\n    email: \"philippe.durand@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Saint-Cloud\",\n    typeBien: \"Maison\",\n    budget: 0,\n    prixEstime: 1200000,\n    tauxHonoraires: 0.035,\n    exclusif: true,\n    motivation: \"Succession\",\n    timeline: \"6 mois\",\n    intention: \"Vente optimisée\",\n    source: \"Porte à porte\",\n    exactSource: \"Prospection secteur - Saint-Cloud centre\",\n    consentement: true,\n    statut: \"Mandat signé\",\n    adresse: \"15 rue de la Paix, 92210 Saint-Cloud\",\n    notes: \"Belle maison familiale, travaux à prévoir\",\n    score: 78,\n    agentOutcome: \"signed\",\n    leadCost: 0,\n    estimatedClosingDays: 180,\n    prochaineAction: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Next week\n    dernierContact: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // Yesterday\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Isabelle Petit\",\n    telephone: \"06 77 88 99 00\",\n    email: \"isabelle.petit@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Levallois-Perret\",\n    typeBien: \"Appartement\",\n    budget: 420000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: false,\n    motivation: \"Rapprochement travail\",\n    timeline: \"urgent\",\n    intention: \"Achat rapide\",\n    source: \"Site web\",\n    exactSource: \"Google Search - Agence Levallois\",\n    consentement: true,\n    statut: \"Gagné\",\n    adresse: \"\",\n    notes: \"Achat finalisé - très satisfaite du service\",\n    score: 95,\n    agentOutcome: \"signed\",\n    leadCost: 35,\n    estimatedClosingDays: 45,\n    dernierContact: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000) // 10 days ago\n  },\n  // Additional prospects for comprehensive testing - distributed across 3 agents\n  {\n    id: nanoid(),\n    nomComplet: \"Antoine Rousseau\",\n    telephone: \"06 12 13 14 15\",\n    email: \"antoine.rousseau@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Courbevoie\",\n    typeBien: \"Duplex\",\n    budget: 0,\n    prixEstime: 650000,\n    tauxHonoraires: 0.04,\n    exclusif: true,\n    motivation: \"Déménagement\",\n    timeline: \"3 mois\",\n    intention: \"Vente standard\",\n    source: \"Recommandation\",\n    exactSource: \"Recommandation - Ancien client Philippe\",\n    consentement: true,\n    statut: \"Nouveau\",\n    adresse: \"25 boulevard de la Défense, 92400 Courbevoie\",\n    notes: \"Appartement moderne avec vue sur la Défense\",\n    score: 85,\n    isHotLead: true,\n    agentOutcome: \"interested\",\n    leadCost: 0,\n    estimatedClosingDays: 90,\n    prochaineAction: new Date(), // Today\n    dernierContact: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago\n    creeLe: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Camille Bonnet\",\n    telephone: \"06 78 90 12 34\",\n    email: \"camille.bonnet@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Issy-les-Moulineaux\",\n    typeBien: \"Appartement\",\n    budget: 380000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: false,\n    motivation: \"Premier achat\",\n    timeline: \"moins de 3 mois\",\n    intention: \"Achat urgent\",\n    source: \"Google Ads\",\n    exactSource: \"Google Ads - Première acquisition immobilière\",\n    consentement: true,\n    statut: \"RDV fixé\",\n    adresse: \"\",\n    notes: \"Jeune cadre, dossier solide, recherche transport proche\",\n    score: 92,\n    isHotLead: true,\n    agentOutcome: \"interested\",\n    leadCost: 42,\n    estimatedClosingDays: 75,\n    prochaineAction: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Tomorrow\n    dernierContact: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n    creeLe: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // 1 day ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Lucas Martin\",\n    telephone: \"06 56 78 90 12\",\n    email: \"lucas.martin@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Meudon\",\n    typeBien: \"Maison\",\n    budget: 0,\n    prixEstime: 850000,\n    tauxHonoraires: 0.035,\n    exclusif: false,\n    motivation: \"Succession\",\n    timeline: \"6 mois\",\n    intention: \"Pas pressé\",\n    source: \"Le Bon Coin\",\n    exactSource: \"Le Bon Coin - Réponse annonce estimation\",\n    consentement: true,\n    statut: \"Contacté\",\n    adresse: \"18 rue des Jardins, 92190 Meudon\",\n    notes: \"Maison familiale, nécessite rafraîchissement\",\n    leadCost: 15,\n    estimatedClosingDays: 180,\n    prochaineAction: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // In 3 days\n    dernierContact: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Élise Dubois\",\n    telephone: \"06 34 56 78 90\",\n    email: \"elise.dubois@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Sèvres\",\n    typeBien: \"Maison\",\n    budget: 720000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: true,\n    motivation: \"Agrandissement familial\",\n    timeline: \"urgent\",\n    intention: \"Recherche active\",\n    source: \"Site web\",\n    exactSource: \"Site web - Contact direct agence\",\n    consentement: true,\n    statut: \"Mandate Pending\",\n    adresse: \"\",\n    notes: \"Famille avec 3 enfants, cherche jardin et calme\",\n    leadCost: 28,\n    estimatedClosingDays: 45,\n    prochaineAction: new Date(), // Today\n    dernierContact: new Date(Date.now() - 30 * 60 * 1000) // 30 minutes ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Maxime Leroy\",\n    telephone: \"06 90 12 34 56\",\n    email: \"maxime.leroy@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Puteaux\",\n    typeBien: \"Appartement\",\n    budget: 0,\n    prixEstime: 520000,\n    tauxHonoraires: 0.04,\n    exclusif: true,\n    motivation: \"Mutation professionnelle\",\n    timeline: \"1 mois\",\n    intention: \"Vente urgente\",\n    source: \"Facebook Ads\",\n    exactSource: \"Facebook Ads - Vente rapide Puteaux\",\n    consentement: true,\n    statut: \"Mandat signé\",\n    adresse: \"12 avenue du Général de Gaulle, 92800 Puteaux\",\n    notes: \"Proche métro, très bon état, mandat exclusif 3 mois\",\n    leadCost: 38,\n    estimatedClosingDays: 60,\n    prochaineAction: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Day after tomorrow\n    dernierContact: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // Yesterday\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Sarah Cohen\",\n    telephone: \"06 23 45 67 89\",\n    email: \"sarah.cohen@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Rueil-Malmaison\",\n    typeBien: \"Appartement\",\n    budget: 490000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: false,\n    motivation: \"Investissement locatif\",\n    timeline: \"4 mois\",\n    intention: \"Recherche méthodique\",\n    source: \"Porte à porte\",\n    exactSource: \"Prospection secteur - Rueil centre\",\n    consentement: true,\n    statut: \"Qualifié\",\n    adresse: \"\",\n    notes: \"Investisseuse expérimentée, recherche rentabilité 4%+\",\n    leadCost: 0,\n    estimatedClosingDays: 120,\n    prochaineAction: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // In 5 days\n    dernierContact: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Julien Blanc\",\n    telephone: \"06 67 89 01 23\",\n    email: \"julien.blanc@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Asnières-sur-Seine\",\n    typeBien: \"Studio\",\n    budget: 0,\n    prixEstime: 220000,\n    tauxHonoraires: 0.05,\n    exclusif: false,\n    motivation: \"Optimisation patrimoniale\",\n    timeline: \"2 mois\",\n    intention: \"Vente conditionnelle\",\n    source: \"Recommandation\",\n    exactSource: \"Recommandation - Notaire Maître Dupont\",\n    consentement: true,\n    statut: \"En négociation\",\n    adresse: \"5 rue Victor Hugo, 92600 Asnières\",\n    notes: \"Studio refait à neuf, proche RER C\",\n    leadCost: 0,\n    estimatedClosingDays: 75,\n    prochaineAction: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Tomorrow\n    dernierContact: new Date(Date.now() - 6 * 60 * 60 * 1000) // 6 hours ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Amélie Moreau\",\n    telephone: \"06 45 67 89 01\",\n    email: \"amelie.moreau@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Garches\",\n    typeBien: \"Maison\",\n    budget: 950000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: true,\n    motivation: \"Résidence principale\",\n    timeline: \"6 mois\",\n    intention: \"Recherche sélective\",\n    source: \"Site web\",\n    exactSource: \"Google Search - Maison Garches\",\n    consentement: true,\n    statut: \"Perdu\",\n    adresse: \"\",\n    notes: \"A choisi une autre agence - prix trop élevé\",\n    leadCost: 52,\n    estimatedClosingDays: 0,\n    dernierContact: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000) // 15 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Nicolas Durand\",\n    telephone: \"06 89 01 23 45\",\n    email: \"nicolas.durand@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Chatou\",\n    typeBien: \"Appartement\",\n    budget: 0,\n    prixEstime: 380000,\n    tauxHonoraires: 0.04,\n    exclusif: true,\n    motivation: \"Achat résidence secondaire\",\n    timeline: \"3 mois\",\n    intention: \"Vente conditionnelle\",\n    source: \"Panneau vendu\",\n    exactSource: \"Panneau A Vendre - Réponse téléphonique\",\n    consentement: true,\n    statut: \"Nouveau\",\n    adresse: \"30 avenue de la République, 78400 Chatou\",\n    notes: \"T3 avec balcon, parking inclus\",\n    leadCost: 0,\n    estimatedClosingDays: 90,\n    prochaineAction: new Date(), // Today\n    dernierContact: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 hours ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Céline Petit\",\n    telephone: \"06 01 23 45 67\",\n    email: \"celine.petit@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Le Vésinet\",\n    typeBien: \"Maison\",\n    budget: 1200000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: false,\n    motivation: \"Retour en France\",\n    timeline: \"urgent\",\n    intention: \"Achat rapide\",\n    source: \"Recommandation\",\n    exactSource: \"Recommandation - Collègue de travail\",\n    consentement: true,\n    statut: \"Gagné\",\n    adresse: \"\",\n    notes: \"Achat finalisé - maison 5 pièces avec jardin\",\n    leadCost: 0,\n    estimatedClosingDays: 30,\n    dernierContact: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Fabien Laurent\",\n    telephone: \"06 76 54 32 10\",\n    email: \"fabien.laurent@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Montesson\",\n    typeBien: \"Maison\",\n    budget: 0,\n    prixEstime: 780000,\n    tauxHonoraires: 0.035,\n    exclusif: false,\n    motivation: \"Divorce\",\n    timeline: \"4 mois\",\n    intention: \"Vente nécessaire\",\n    source: \"Google Ads\",\n    exactSource: \"Google Ads - Vente maison Montesson\",\n    consentement: true,\n    statut: \"Contacté\",\n    adresse: \"8 impasse des Tilleuls, 78360 Montesson\",\n    notes: \"Situation délicate, vente nécessaire partage\",\n    leadCost: 48,\n    estimatedClosingDays: 120,\n    prochaineAction: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000), // In 4 days\n    dernierContact: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 1 week ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Stéphanie Roux\",\n    telephone: \"06 32 10 98 76\",\n    email: \"stephanie.roux@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Croissy-sur-Seine\",\n    typeBien: \"Appartement\",\n    budget: 420000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: true,\n    motivation: \"Rapprochement famille\",\n    timeline: \"2 mois\",\n    intention: \"Recherche ciblée\",\n    source: \"Site web\",\n    exactSource: \"Site web - Newsletter mensuelle\",\n    consentement: true,\n    statut: \"RDV fixé\",\n    adresse: \"\",\n    notes: \"Recherche T3 avec terrasse, budget ferme\",\n    leadCost: 18,\n    estimatedClosingDays: 60,\n    prochaineAction: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Tomorrow\n    dernierContact: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // Yesterday\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Vincent Garcia\",\n    telephone: \"06 54 32 10 98\",\n    email: \"vincent.garcia@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Carrières-sur-Seine\",\n    typeBien: \"Maison\",\n    budget: 0,\n    prixEstime: 1100000,\n    tauxHonoraires: 0.03,\n    exclusif: true,\n    motivation: \"Retraite\",\n    timeline: \"1 an\",\n    intention: \"Pas pressé\",\n    source: \"Porte à porte\",\n    exactSource: \"Prospection - Carrières centre\",\n    consentement: true,\n    statut: \"Qualifié\",\n    adresse: \"22 rue de la Seine, 78420 Carrières-sur-Seine\",\n    notes: \"Belle propriété, vue sur Seine, travaux à prévoir\",\n    leadCost: 0,\n    estimatedClosingDays: 300,\n    prochaineAction: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // In 2 weeks\n    dernierContact: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000) // 10 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Marina Silva\",\n    telephone: \"06 98 76 54 32\",\n    email: \"marina.silva@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Houilles\",\n    typeBien: \"Appartement\",\n    budget: 310000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: false,\n    motivation: \"Premier achat\",\n    timeline: \"5 mois\",\n    intention: \"Recherche prudente\",\n    source: \"Facebook Ads\",\n    exactSource: \"Facebook Ads - Primo accédant Houilles\",\n    consentement: true,\n    statut: \"Pas de réponse\",\n    adresse: \"\",\n    notes: \"Plus de 5 appels sans retour, abandonner\",\n    leadCost: 35,\n    estimatedClosingDays: 0,\n    dernierContact: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000) // 12 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"David Chen\",\n    telephone: \"06 76 54 32 19\",\n    email: \"david.chen@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Sartrouville\",\n    typeBien: \"Studio\",\n    budget: 0,\n    prixEstime: 180000,\n    tauxHonoraires: 0.05,\n    exclusif: false,\n    motivation: \"Liquidation patrimoine\",\n    timeline: \"2 mois\",\n    intention: \"Vente rapide\",\n    source: \"Le Bon Coin\",\n    exactSource: \"Le Bon Coin - Réponse annonce vente rapide\",\n    consentement: true,\n    statut: \"En négociation\",\n    adresse: \"14 boulevard Voltaire, 78500 Sartrouville\",\n    notes: \"Studio rénové, prix négociable pour vente rapide\",\n    leadCost: 8,\n    estimatedClosingDays: 45,\n    prochaineAction: new Date(), // Today\n    dernierContact: new Date(Date.now() - 3 * 60 * 60 * 1000) // 3 hours ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Olivier Forestier\",\n    telephone: \"06 11 22 33 44\",\n    email: \"olivier.forestier@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Versailles\",\n    typeBien: \"Maison\",\n    budget: 1500000,\n    prixEstime: 0,\n    tauxHonoraires: 0.025,\n    exclusif: true,\n    motivation: \"Résidence principale\",\n    timeline: \"1 an\",\n    intention: \"Recherche haut de gamme\",\n    source: \"Recommandation\",\n    exactSource: \"Recommandation - Banquier privé\",\n    consentement: true,\n    statut: \"Qualifié\",\n    adresse: \"\",\n    notes: \"Client fortuné, recherche propriété d'exception\",\n    leadCost: 0,\n    estimatedClosingDays: 240,\n    prochaineAction: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // In 10 days\n    dernierContact: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Émilie Rossignol\",\n    telephone: \"06 87 65 43 21\",\n    email: \"emilie.rossignol@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Colombes\",\n    typeBien: \"Appartement\",\n    budget: 0,\n    prixEstime: 290000,\n    tauxHonoraires: 0.045,\n    exclusif: false,\n    motivation: \"Déménagement\",\n    timeline: \"2 mois\",\n    intention: \"Vente standard\",\n    source: \"Panneau vendu\",\n    exactSource: \"Appel suite panneau A Vendre\",\n    consentement: true,\n    statut: \"Contacté\",\n    adresse: \"7 rue Lamartine, 92700 Colombes\",\n    notes: \"T2 lumineux, proche métro ligne 13\",\n    leadCost: 0,\n    estimatedClosingDays: 75,\n    prochaineAction: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000), // In 6 days\n    dernierContact: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000) // 8 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Benjamin Vidal\",\n    telephone: \"06 55 44 33 22\",\n    email: \"benjamin.vidal@email.fr\",\n    type: \"Acheteur\",\n    ville: \"Boulogne-Billancourt\",\n    typeBien: \"Appartement\",\n    budget: 600000,\n    prixEstime: 0,\n    tauxHonoraires: 0.03,\n    exclusif: false,\n    motivation: \"Investissement locatif\",\n    timeline: \"3 mois\",\n    intention: \"Recherche rentabilité\",\n    source: \"Google Ads\",\n    exactSource: \"Google Ads - Investissement locatif Boulogne\",\n    consentement: true,\n    statut: \"RDV fixé\",\n    adresse: \"\",\n    notes: \"Investisseur chevronné, recherche T3/T4\",\n    leadCost: 55,\n    estimatedClosingDays: 90,\n    prochaineAction: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Day after tomorrow\n    dernierContact: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago\n  },\n  {\n    id: nanoid(),\n    nomComplet: \"Laëtitia Bernard\",\n    telephone: \"06 33 44 55 66\",\n    email: \"laetitia.bernard@email.fr\",\n    type: \"Vendeur\",\n    ville: \"Antony\",\n    typeBien: \"Maison\",\n    budget: 0,\n    prixEstime: 680000,\n    tauxHonoraires: 0.035,\n    exclusif: true,\n    motivation: \"Divorce\",\n    timeline: \"urgent\",\n    intention: \"Vente obligatoire\",\n    source: \"Recommandation\",\n    exactSource: \"Recommandation - Avocat divorce\",\n    consentement: true,\n    statut: \"Mandate Pending\",\n    adresse: \"45 rue des Roses, 92160 Antony\",\n    notes: \"Situation urgente, vente imposée par jugement\",\n    leadCost: 0,\n    estimatedClosingDays: 60,\n    prochaineAction: new Date(), // Today\n    dernierContact: new Date(Date.now() - 45 * 60 * 1000) // 45 minutes ago\n  }\n];","size_bytes":21539},"server/init-demo.ts":{"content":"import { db } from \"./db\";\nimport { users, prospects } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\nimport { demoUsers, demoProspects } from \"./demo-data\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16).toString('hex');\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString('hex')}.${salt}`;\n}\n\nexport async function initializeDemoData() {\n  try {\n    console.log(\"🚀 Initializing demo data...\");\n\n    // Check if demo data already exists\n    const existingUsers = await db.select().from(users).where(eq(users.username, 'admin'));\n    if (existingUsers.length > 0) {\n      console.log(\"✅ Demo data already exists, skipping initialization\");\n      return;\n    }\n\n    // Create demo users with hashed passwords\n    const createdUsers = [];\n    for (const user of demoUsers) {\n      const hashedPassword = await hashPassword(user.password);\n      const [createdUser] = await db.insert(users).values({\n        ...user,\n        password: hashedPassword,\n        role: user.username === 'admin' ? 'admin' : 'agent'\n      }).returning();\n      createdUsers.push(createdUser);\n      console.log(`✅ Created user: ${user.username} (${user.name})`);\n    }\n\n    // Assign prospects to agents\n    const agents = createdUsers.filter(u => u.role === 'agent');\n    \n    for (let i = 0; i < demoProspects.length; i++) {\n      const prospect = demoProspects[i];\n      const assignedAgent = agents[i % agents.length]; // Distribute prospects among agents\n      \n      await db.insert(prospects).values({\n        ...prospect,\n        agentId: assignedAgent.id,\n        // Convert dates to timestamps for database\n        prochaineAction: prospect.prochaineAction || null,\n        dernierContact: prospect.dernierContact || null,\n      });\n      \n      console.log(`✅ Created prospect: ${prospect.nomComplet} (assigned to ${assignedAgent.name})`);\n    }\n\n    console.log(`🎉 Demo data initialized successfully!`);\n    console.log(`📊 Created ${createdUsers.length} users and ${demoProspects.length} prospects`);\n    console.log(`🔑 Demo login credentials:`);\n    console.log(`   Admin: admin / demo123`);\n    console.log(`   Alice Martin: alice.martin / demo123`);\n    console.log(`   Ben Leroy: ben.leroy / demo123`);\n\n  } catch (error) {\n    console.error(\"❌ Error initializing demo data:\", error);\n    throw error;\n  }\n}","size_bytes":2536},"client/src/components/crm/agency-branding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Palette, Upload, Save } from \"lucide-react\";\n\ninterface AgencyBrandingProps {\n  onSave: (branding: AgencyBranding) => void;\n}\n\ninterface AgencyBranding {\n  agencyName: string;\n  logo?: string;\n  primaryColor: string;\n  secondaryColor: string;\n  customFont?: string;\n}\n\nexport default function AgencyBranding({ onSave }: AgencyBrandingProps) {\n  const [branding, setBranding] = useState<AgencyBranding>({\n    agencyName: \"Redweyne Immobilier\",\n    primaryColor: \"#3b82f6\",\n    secondaryColor: \"#64748b\",\n  });\n\n  useEffect(() => {\n    // Apply branding to document root\n    document.documentElement.style.setProperty('--primary', `hsl(${hexToHsl(branding.primaryColor)})`);\n    document.documentElement.style.setProperty('--secondary', `hsl(${hexToHsl(branding.secondaryColor)})`);\n  }, [branding.primaryColor, branding.secondaryColor]);\n\n  const hexToHsl = (hex: string): string => {\n    // Convert hex to HSL for CSS variables\n    const r = parseInt(hex.slice(1, 3), 16) / 255;\n    const g = parseInt(hex.slice(3, 5), 16) / 255;\n    const b = parseInt(hex.slice(5, 7), 16) / 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h, s, l = (max + min) / 2;\n\n    if (max === min) {\n      h = s = 0;\n    } else {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      \n      switch (max) {\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / d + 2; break;\n        case b: h = (r - g) / d + 4; break;\n        default: h = 0;\n      }\n      h /= 6;\n    }\n\n    h = Math.round(h * 360);\n    s = Math.round(s * 100);\n    l = Math.round(l * 100);\n\n    return `${h} ${s}% ${l}%`;\n  };\n\n  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setBranding(prev => ({ ...prev, logo: e.target?.result as string }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSave = () => {\n    onSave(branding);\n  };\n\n  const presetColors = [\n    { name: \"Bleu\", primary: \"#3b82f6\", secondary: \"#64748b\" },\n    { name: \"Vert\", primary: \"#10b981\", secondary: \"#6b7280\" },\n    { name: \"Rouge\", primary: \"#ef4444\", secondary: \"#6b7280\" },\n    { name: \"Violet\", primary: \"#8b5cf6\", secondary: \"#6b7280\" },\n    { name: \"Orange\", primary: \"#f97316\", secondary: \"#6b7280\" },\n    { name: \"Rose\", primary: \"#ec4899\", secondary: \"#6b7280\" },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Palette className=\"w-5 h-5\" />\n          Personnalisation de l'agence\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Agency Name */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"agencyName\">Nom de l'agence</Label>\n          <Input\n            id=\"agencyName\"\n            value={branding.agencyName}\n            onChange={(e) => setBranding(prev => ({ ...prev, agencyName: e.target.value }))}\n            placeholder=\"Nom de votre agence\"\n          />\n        </div>\n\n        {/* Logo Upload */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"logo\">Logo</Label>\n          <div className=\"flex items-center gap-4\">\n            {branding.logo && (\n              <img src={branding.logo} alt=\"Logo\" className=\"w-12 h-12 object-contain rounded border\" />\n            )}\n            <div className=\"flex-1\">\n              <Input\n                id=\"logo\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleLogoUpload}\n                className=\"hidden\"\n              />\n              <Button\n                variant=\"outline\"\n                onClick={() => document.getElementById('logo')?.click()}\n                className=\"gap-2\"\n              >\n                <Upload className=\"w-4 h-4\" />\n                Choisir un logo\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Color Presets */}\n        <div className=\"space-y-2\">\n          <Label>Thèmes prédéfinis</Label>\n          <div className=\"grid grid-cols-3 gap-2\">\n            {presetColors.map((preset) => (\n              <Button\n                key={preset.name}\n                variant=\"outline\"\n                onClick={() => setBranding(prev => ({ \n                  ...prev, \n                  primaryColor: preset.primary, \n                  secondaryColor: preset.secondary \n                }))}\n                className=\"h-12 flex flex-col gap-1\"\n              >\n                <div className=\"flex gap-1\">\n                  <div \n                    className=\"w-3 h-3 rounded-full\" \n                    style={{ backgroundColor: preset.primary }}\n                  ></div>\n                  <div \n                    className=\"w-3 h-3 rounded-full\" \n                    style={{ backgroundColor: preset.secondary }}\n                  ></div>\n                </div>\n                <span className=\"text-xs\">{preset.name}</span>\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Custom Colors */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"primaryColor\">Couleur principale</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"primaryColor\"\n                type=\"color\"\n                value={branding.primaryColor}\n                onChange={(e) => setBranding(prev => ({ ...prev, primaryColor: e.target.value }))}\n                className=\"w-12 h-10 p-1 rounded border\"\n              />\n              <Input\n                value={branding.primaryColor}\n                onChange={(e) => setBranding(prev => ({ ...prev, primaryColor: e.target.value }))}\n                placeholder=\"#3b82f6\"\n                className=\"flex-1\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"secondaryColor\">Couleur secondaire</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"secondaryColor\"\n                type=\"color\"\n                value={branding.secondaryColor}\n                onChange={(e) => setBranding(prev => ({ ...prev, secondaryColor: e.target.value }))}\n                className=\"w-12 h-10 p-1 rounded border\"\n              />\n              <Input\n                value={branding.secondaryColor}\n                onChange={(e) => setBranding(prev => ({ ...prev, secondaryColor: e.target.value }))}\n                placeholder=\"#64748b\"\n                className=\"flex-1\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Custom Font */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"customFont\">Police personnalisée (Google Fonts)</Label>\n          <Input\n            id=\"customFont\"\n            value={branding.customFont || \"\"}\n            onChange={(e) => setBranding(prev => ({ ...prev, customFont: e.target.value }))}\n            placeholder=\"ex: Inter, Roboto, Open Sans\"\n          />\n        </div>\n\n        {/* Preview */}\n        <div className=\"space-y-2\">\n          <Label>Aperçu</Label>\n          <div \n            className=\"p-4 rounded-lg border\"\n            style={{ \n              backgroundColor: branding.primaryColor + '10',\n              borderColor: branding.primaryColor,\n              fontFamily: branding.customFont || 'inherit'\n            }}\n          >\n            <div className=\"flex items-center gap-3\">\n              {branding.logo && (\n                <img src={branding.logo} alt=\"Logo\" className=\"w-8 h-8 object-contain\" />\n              )}\n              <div>\n                <h3 \n                  className=\"font-semibold\"\n                  style={{ color: branding.primaryColor }}\n                >\n                  {branding.agencyName}\n                </h3>\n                <p \n                  className=\"text-sm\"\n                  style={{ color: branding.secondaryColor }}\n                >\n                  CRM Immobilier\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <Button onClick={handleSave} className=\"w-full gap-2\">\n          <Save className=\"w-4 h-4\" />\n          Sauvegarder la personnalisation\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8708},"client/src/components/crm/contact-timeline.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Phone, Mail, MessageSquare, User, Plus } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport type { Prospect, ContactInteraction } from \"@shared/schema\";\n\ninterface ContactTimelineProps {\n  prospect: Prospect;\n  interactions: ContactInteraction[];\n  onAddInteraction: (interaction: Partial<ContactInteraction>) => void;\n}\n\nexport default function ContactTimeline({ prospect, interactions, onAddInteraction }: ContactTimelineProps) {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [newInteraction, setNewInteraction] = useState({\n    type: \"call\",\n    description: \"\",\n    outcome: \"neutral\"\n  });\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"call\": return <Phone className=\"w-4 h-4\" />;\n      case \"email\": return <Mail className=\"w-4 h-4\" />;\n      case \"sms\": return <MessageSquare className=\"w-4 h-4\" />;\n      case \"meeting\": return <Calendar className=\"w-4 h-4\" />;\n      default: return <User className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getOutcomeColor = (outcome: string) => {\n    switch (outcome) {\n      case \"positive\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"negative\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const handleSubmit = () => {\n    onAddInteraction({\n      ...newInteraction,\n      prospectId: prospect.id,\n    });\n    setNewInteraction({ type: \"call\", description: \"\", outcome: \"neutral\" });\n    setShowAddForm(false);\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"text-lg\">Historique des contacts</CardTitle>\n        <Button \n          size=\"sm\" \n          onClick={() => setShowAddForm(!showAddForm)}\n          className=\"gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Ajouter\n        </Button>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {showAddForm && (\n          <div className=\"p-4 border rounded-lg bg-gray-50 space-y-3\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Select value={newInteraction.type} onValueChange={(value) => \n                setNewInteraction(prev => ({ ...prev, type: value }))\n              }>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"call\">Appel</SelectItem>\n                  <SelectItem value=\"email\">Email</SelectItem>\n                  <SelectItem value=\"sms\">SMS</SelectItem>\n                  <SelectItem value=\"meeting\">Rendez-vous</SelectItem>\n                  <SelectItem value=\"note\">Note</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={newInteraction.outcome} onValueChange={(value) => \n                setNewInteraction(prev => ({ ...prev, outcome: value }))\n              }>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"positive\">Positif</SelectItem>\n                  <SelectItem value=\"neutral\">Neutre</SelectItem>\n                  <SelectItem value=\"negative\">Négatif</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Textarea \n              placeholder=\"Description de l'interaction...\"\n              value={newInteraction.description}\n              onChange={(e) => setNewInteraction(prev => ({ ...prev, description: e.target.value }))}\n            />\n            <div className=\"flex gap-2\">\n              <Button onClick={handleSubmit} size=\"sm\">Enregistrer</Button>\n              <Button variant=\"outline\" onClick={() => setShowAddForm(false)} size=\"sm\">Annuler</Button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n          {interactions.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-4\">Aucun contact enregistré</p>\n          ) : (\n            interactions.map((interaction) => (\n              <div key={interaction.id} className=\"flex items-start gap-3 p-3 border rounded-lg\">\n                <div className=\"flex-shrink-0 p-2 bg-blue-100 rounded-full\">\n                  {getIcon(interaction.type)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"font-medium capitalize\">{interaction.type}</span>\n                    <Badge className={getOutcomeColor(interaction.outcome || \"neutral\")}>\n                      {interaction.outcome === \"positive\" ? \"Positif\" : \n                       interaction.outcome === \"negative\" ? \"Négatif\" : \"Neutre\"}\n                    </Badge>\n                    <span className=\"text-sm text-gray-500\">\n                      {format(new Date(interaction.timestamp!), \"dd MMM à HH:mm\", { locale: fr })}\n                    </span>\n                  </div>\n                  <p className=\"text-gray-700\">{interaction.description}</p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5739},"client/src/components/crm/dark-mode-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport default function DarkModeToggle() {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const isDarkMode = localStorage.getItem('darkMode') === 'true';\n    setIsDark(isDarkMode);\n    document.documentElement.classList.toggle('dark', isDarkMode);\n  }, []);\n\n  const toggleDarkMode = () => {\n    const newDarkMode = !isDark;\n    setIsDark(newDarkMode);\n    localStorage.setItem('darkMode', newDarkMode.toString());\n    document.documentElement.classList.toggle('dark', newDarkMode);\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={toggleDarkMode}\n      className=\"w-9 px-0\"\n    >\n      {isDark ? (\n        <Sun className=\"h-4 w-4\" />\n      ) : (\n        <Moon className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle dark mode</span>\n    </Button>\n  );\n}","size_bytes":966},"client/src/components/crm/demo-banner.tsx":{"content":"import { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Info, Sparkles } from \"lucide-react\";\n\nexport default function DemoBanner() {\n  return (\n    <Alert className=\"mb-6 bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n      <div className=\"flex items-center gap-2\">\n        <Sparkles className=\"h-4 w-4 text-blue-600\" />\n        <Info className=\"h-4 w-4 text-blue-600\" />\n      </div>\n      <AlertDescription className=\"text-blue-800 font-medium\">\n        <strong>Mode Démonstration</strong> - Vous utilisez une version de test du CRM Redweyne. \n        Toutes les données sont fictives et destinées à l'évaluation des fonctionnalités.\n      </AlertDescription>\n    </Alert>\n  );\n}","size_bytes":720},"client/src/components/crm/hot-lead-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Flame } from \"lucide-react\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface HotLeadBadgeProps {\n  prospect: Prospect;\n}\n\nexport default function HotLeadBadge({ prospect }: HotLeadBadgeProps) {\n  // Auto Hot Lead logic: score > 80 and timeline < 3 months\n  const isHotLead = prospect.score && prospect.score > 80 && \n    prospect.timeline && \n    [\"1 mois\", \"2 mois\", \"moins de 3 mois\", \"urgent\"].includes(prospect.timeline.toLowerCase());\n\n  if (!isHotLead && !prospect.isHotLead) return null;\n\n  return (\n    <Badge variant=\"destructive\" className=\"bg-red-500 hover:bg-red-600 text-white animate-pulse\">\n      <Flame className=\"w-3 h-3 mr-1\" />\n      Hot Lead\n    </Badge>\n  );\n}","size_bytes":748},"client/src/components/crm/mobile-express-mode.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Phone, MessageCircle, Calendar, MapPin, Euro, User, ArrowRight } from \"lucide-react\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface MobileExpressModeProps {\n  prospects: Prospect[];\n  onCall: (prospect: Prospect) => void;\n  onWhatsApp: (prospect: Prospect) => void;\n  onScheduleRDV: (prospect: Prospect) => void;\n}\n\nexport default function MobileExpressMode({ prospects, onCall, onWhatsApp, onScheduleRDV }: MobileExpressModeProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  \n  // Filter prospects that need immediate attention\n  const priorityProspects = prospects.filter(p => {\n    const today = new Date().toDateString();\n    const needsCall = p.prochaineAction && \n      new Date(p.prochaineAction).toDateString() === today &&\n      ![\"Gagné\", \"Perdu\", \"Pas de réponse\"].includes(p.statut || \"\");\n    \n    const isHotLead = (p.score && p.score > 80) || p.isHotLead;\n    const isNewToday = p.creeLe && new Date(p.creeLe).toDateString() === today;\n    \n    return needsCall || isHotLead || isNewToday;\n  }).sort((a, b) => (b.score || 0) - (a.score || 0));\n\n  const currentProspect = priorityProspects[currentIndex];\n\n  const nextProspect = () => {\n    setCurrentIndex((prev) => (prev + 1) % priorityProspects.length);\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"fr-FR\", {\n      style: \"currency\",\n      currency: \"EUR\",\n      minimumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const getUrgencyColor = (prospect: Prospect) => {\n    if (prospect.score && prospect.score > 90) return \"bg-red-500\";\n    if (prospect.score && prospect.score > 80) return \"bg-orange-500\";\n    if (prospect.prochaineAction && new Date(prospect.prochaineAction).toDateString() === new Date().toDateString()) {\n      return \"bg-blue-500\";\n    }\n    return \"bg-green-500\";\n  };\n\n  if (priorityProspects.length === 0) {\n    return (\n      <Card className=\"max-w-md mx-auto\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center\">\n            <User className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Aucun prospect prioritaire</h3>\n            <p className=\"text-gray-500\">Tous vos prospects sont à jour !</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"max-w-md mx-auto space-y-4\">\n      {/* Progress Indicator */}\n      <div className=\"flex items-center justify-between text-sm text-gray-600\">\n        <span>Prospect {currentIndex + 1} sur {priorityProspects.length}</span>\n        <div className=\"flex gap-1\">\n          {priorityProspects.map((_, index) => (\n            <div\n              key={index}\n              className={`w-2 h-2 rounded-full ${\n                index === currentIndex ? \"bg-blue-500\" : \"bg-gray-300\"\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Main Prospect Card */}\n      <Card className=\"relative overflow-hidden\">\n        <div className={`absolute top-0 left-0 w-1 h-full ${getUrgencyColor(currentProspect)}`}></div>\n        \n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <CardTitle className=\"text-xl\">{currentProspect.nomComplet}</CardTitle>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <MapPin className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-gray-600\">{currentProspect.ville}</span>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <Badge variant=\"outline\" className=\"mb-1\">\n                {currentProspect.type}\n              </Badge>\n              {currentProspect.score && (\n                <div className=\"text-sm text-gray-500\">\n                  Score: {currentProspect.score}/100\n                </div>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          {/* Key Info */}\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-500\">Budget:</span>\n              <p className=\"font-medium\">\n                {formatCurrency(currentProspect.budget || currentProspect.prixEstime || 0)}\n              </p>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Statut:</span>\n              <p className=\"font-medium\">{currentProspect.statut}</p>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Source:</span>\n              <p className=\"font-medium\">{currentProspect.exactSource || currentProspect.source || \"—\"}</p>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Timeline:</span>\n              <p className=\"font-medium\">{currentProspect.timeline || \"—\"}</p>\n            </div>\n          </div>\n\n          {/* Notes */}\n          {currentProspect.notes && (\n            <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-3\">\n              <span className=\"text-gray-500 text-sm\">Notes:</span>\n              <p className=\"text-sm mt-1\">{currentProspect.notes}</p>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-3 gap-2\">\n            <Button\n              onClick={() => onCall(currentProspect)}\n              className=\"flex flex-col gap-1 h-16\"\n              variant=\"outline\"\n            >\n              <Phone className=\"w-5 h-5\" />\n              <span className=\"text-xs\">Appeler</span>\n            </Button>\n            \n            <Button\n              onClick={() => onWhatsApp(currentProspect)}\n              className=\"flex flex-col gap-1 h-16\"\n              variant=\"outline\"\n            >\n              <MessageCircle className=\"w-5 h-5\" />\n              <span className=\"text-xs\">WhatsApp</span>\n            </Button>\n            \n            <Button\n              onClick={() => onScheduleRDV(currentProspect)}\n              className=\"flex flex-col gap-1 h-16\"\n              variant=\"outline\"\n            >\n              <Calendar className=\"w-5 h-5\" />\n              <span className=\"text-xs\">RDV</span>\n            </Button>\n          </div>\n\n          {/* Next Button */}\n          <Button\n            onClick={nextProspect}\n            className=\"w-full\"\n            disabled={priorityProspects.length <= 1}\n          >\n            Prospect suivant <ArrowRight className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6761},"client/src/components/crm/notifications-panel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Phone, Calendar, AlertTriangle, CheckCircle, X } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface NotificationsPanelProps {\n  prospects: Prospect[];\n}\n\ninterface Notification {\n  id: string;\n  type: \"call_due\" | \"follow_up\" | \"hot_lead\" | \"rdv_reminder\";\n  title: string;\n  message: string;\n  prospect?: Prospect;\n  timestamp: Date;\n  isRead: boolean;\n}\n\nexport default function NotificationsPanel({ prospects }: NotificationsPanelProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  useEffect(() => {\n    const generateNotifications = () => {\n      const now = new Date();\n      const today = now.toDateString();\n      const newNotifications: Notification[] = [];\n\n      // Call due notifications\n      prospects.forEach(prospect => {\n        if (prospect.prochaineAction && \n            new Date(prospect.prochaineAction).toDateString() === today &&\n            ![\"Gagné\", \"Perdu\", \"Pas de réponse\"].includes(prospect.statut || \"\")) {\n          newNotifications.push({\n            id: `call_${prospect.id}`,\n            type: \"call_due\",\n            title: \"Appel à effectuer\",\n            message: `${prospect.nomComplet} - ${prospect.ville}`,\n            prospect,\n            timestamp: new Date(prospect.prochaineAction),\n            isRead: false\n          });\n        }\n\n        // Hot lead notifications\n        if (prospect.score && prospect.score > 80 && \n            prospect.timeline && \n            [\"1 mois\", \"2 mois\", \"moins de 3 mois\", \"urgent\"].includes(prospect.timeline.toLowerCase())) {\n          newNotifications.push({\n            id: `hot_${prospect.id}`,\n            type: \"hot_lead\",\n            title: \"Hot Lead détecté\",\n            message: `${prospect.nomComplet} - Score: ${prospect.score}`,\n            prospect,\n            timestamp: now,\n            isRead: false\n          });\n        }\n\n        // Follow-up needed\n        if (prospect.dernierContact) {\n          const daysSinceContact = Math.floor((now.getTime() - new Date(prospect.dernierContact).getTime()) / (1000 * 60 * 60 * 24));\n          if (daysSinceContact > 7 && ![\"Gagné\", \"Perdu\", \"Pas de réponse\"].includes(prospect.statut || \"\")) {\n            newNotifications.push({\n              id: `followup_${prospect.id}`,\n              type: \"follow_up\",\n              title: \"Relance nécessaire\",\n              message: `${prospect.nomComplet} - Dernier contact: ${daysSinceContact} jours`,\n              prospect,\n              timestamp: now,\n              isRead: false\n            });\n          }\n        }\n      });\n\n      setNotifications(newNotifications.slice(0, 10)); // Limit to 10 notifications\n    };\n\n    generateNotifications();\n    \n    // Update notifications every minute\n    const interval = setInterval(generateNotifications, 60000);\n    return () => clearInterval(interval);\n  }, [prospects]);\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev => \n      prev.map(n => n.id === id ? { ...n, isRead: true } : n)\n    );\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"call_due\": return <Phone className=\"w-4 h-4 text-blue-600\" />;\n      case \"hot_lead\": return <AlertTriangle className=\"w-4 h-4 text-red-600\" />;\n      case \"follow_up\": return <Calendar className=\"w-4 h-4 text-orange-600\" />;\n      default: return <Bell className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"call_due\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"hot_lead\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"follow_up\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => setShowNotifications(!showNotifications)}\n        className=\"relative\"\n      >\n        <Bell className=\"w-4 h-4\" />\n        {unreadCount > 0 && (\n          <Badge className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs bg-red-500\">\n            {unreadCount > 9 ? \"9+\" : unreadCount}\n          </Badge>\n        )}\n      </Button>\n\n      {showNotifications && (\n        <Card className=\"absolute right-0 top-full mt-2 w-80 max-h-96 overflow-hidden z-50 shadow-lg\">\n          <CardHeader className=\"pb-2\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Notifications</CardTitle>\n              <div className=\"flex gap-2\">\n                {unreadCount > 0 && (\n                  <Button variant=\"ghost\" size=\"sm\" onClick={markAllAsRead}>\n                    <CheckCircle className=\"w-4 h-4 mr-1\" />\n                    Tout lire\n                  </Button>\n                )}\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowNotifications(false)}>\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"max-h-64 overflow-y-auto\">\n              {notifications.length === 0 ? (\n                <p className=\"text-center text-gray-500 py-8\">Aucune notification</p>\n              ) : (\n                notifications.map((notification) => (\n                  <div\n                    key={notification.id}\n                    className={`p-3 border-b cursor-pointer hover:bg-gray-50 ${\n                      !notification.isRead ? \"bg-blue-50\" : \"\"\n                    }`}\n                    onClick={() => markAsRead(notification.id)}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"flex-shrink-0 mt-1\">\n                        {getIcon(notification.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <span className=\"font-medium text-sm\">{notification.title}</span>\n                          <Badge className={`text-xs ${getTypeColor(notification.type)}`}>\n                            {notification.type === \"call_due\" ? \"Appel\" :\n                             notification.type === \"hot_lead\" ? \"Hot\" :\n                             notification.type === \"follow_up\" ? \"Relance\" : \"Info\"}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-700\">{notification.message}</p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {format(notification.timestamp, \"dd MMM à HH:mm\", { locale: fr })}\n                        </p>\n                      </div>\n                      {!notification.isRead && (\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0 mt-2\"></div>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":7693},"client/src/components/crm/quick-actions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { \n  Phone, \n  MessageSquare, \n  MessageCircle, \n  Calendar,\n  FileDown,\n  ExternalLink,\n  Mail\n} from \"lucide-react\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface QuickActionsProps {\n  prospect: Prospect;\n  onEdit?: () => void;\n  compact?: boolean;\n}\n\nexport default function QuickActions({ prospect, onEdit, compact = false }: QuickActionsProps) {\n  const generateWhatsAppLink = (prospect: Prospect) => {\n    const message = `Bonjour ${prospect.nomComplet}, je suis votre agent immobilier concernant votre projet ${prospect.type?.toLowerCase()} à ${prospect.ville}. Budget: ${formatCurrency(prospect.budget || 0)}. Pouvons-nous discuter de votre projet ?`;\n    const phoneNumber = prospect.telephone?.replace(/\\s/g, '').replace(/\\+33/, '33');\n    return `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"fr-FR\", {\n      style: \"currency\",\n      currency: \"EUR\",\n      minimumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const generateEmailLink = (prospect: Prospect) => {\n    const subject = `Votre projet immobilier à ${prospect.ville}`;\n    const body = `Bonjour ${prospect.nomComplet},\\n\\nJe vous contacte concernant votre projet ${prospect.type?.toLowerCase()} à ${prospect.ville}.\\n\\nCordialement,\\nVotre agent immobilier`;\n    return `mailto:${prospect.email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n  };\n\n  const handleCall = () => {\n    if (prospect.telephone) {\n      window.open(`tel:${prospect.telephone}`, '_self');\n    }\n  };\n\n  const handleWhatsApp = () => {\n    window.open(generateWhatsAppLink(prospect), '_blank');\n  };\n\n  const handleEmail = () => {\n    if (prospect.email) {\n      window.open(generateEmailLink(prospect), '_self');\n    }\n  };\n\n  const handleCalendar = () => {\n    // Google Calendar integration would go here\n    const eventTitle = `RDV avec ${prospect.nomComplet}`;\n    const eventDetails = `Projet ${prospect.type} à ${prospect.ville} - Budget: ${formatCurrency(prospect.budget || 0)}`;\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() + 1); // Tomorrow\n    const endDate = new Date(startDate);\n    endDate.setHours(startDate.getHours() + 1); // 1 hour meeting\n    \n    const googleCalendarUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(eventTitle)}&details=${encodeURIComponent(eventDetails)}&dates=${startDate.toISOString().replace(/[-:]/g, '').split('.')[0]}Z/${endDate.toISOString().replace(/[-:]/g, '').split('.')[0]}Z`;\n    \n    window.open(googleCalendarUrl, '_blank');\n  };\n\n  const exportPDF = () => {\n    // PDF export would go here\n    console.log(\"Exporting PDF for prospect:\", prospect.id);\n  };\n\n  if (compact) {\n    return (\n      <div className=\"flex gap-1\">\n        <Button size=\"sm\" variant=\"outline\" onClick={handleCall} title=\"Appeler\">\n          <Phone className=\"w-3 h-3\" />\n        </Button>\n        <Button size=\"sm\" variant=\"outline\" onClick={handleWhatsApp} title=\"WhatsApp\">\n          <MessageCircle className=\"w-3 h-3\" />\n        </Button>\n        <Button size=\"sm\" variant=\"outline\" onClick={handleEmail} title=\"Email\">\n          <Mail className=\"w-3 h-3\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex gap-2 flex-wrap\">\n      <Button size=\"sm\" variant=\"outline\" onClick={handleCall} className=\"gap-1\">\n        <Phone className=\"w-4 h-4\" />\n        Appeler\n      </Button>\n      <Button size=\"sm\" variant=\"outline\" onClick={handleWhatsApp} className=\"gap-1\">\n        <MessageCircle className=\"w-4 h-4\" />\n        WhatsApp\n      </Button>\n      <Button size=\"sm\" variant=\"outline\" onClick={handleEmail} className=\"gap-1\">\n        <Mail className=\"w-4 h-4\" />\n        Email\n      </Button>\n      <Button size=\"sm\" variant=\"outline\" onClick={handleCalendar} className=\"gap-1\">\n        <Calendar className=\"w-4 h-4\" />\n        RDV\n      </Button>\n      <Button size=\"sm\" variant=\"outline\" onClick={exportPDF} className=\"gap-1\">\n        <FileDown className=\"w-4 h-4\" />\n        PDF\n      </Button>\n    </div>\n  );\n}","size_bytes":4203},"client/src/components/crm/roi-calculator.tsx":{"content":"import { useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, TrendingDown, DollarSign, Target } from \"lucide-react\";\nimport type { Prospect } from \"@shared/schema\";\n\ninterface ROICalculatorProps {\n  prospects: Prospect[];\n  agentId?: string;\n}\n\nexport default function ROICalculator({ prospects, agentId }: ROICalculatorProps) {\n  const roiData = useMemo(() => {\n    const filteredProspects = agentId \n      ? prospects.filter(p => p.agentId === agentId)\n      : prospects;\n\n    const totalLeadCost = filteredProspects.reduce((sum, p) => sum + (p.leadCost || 0), 0);\n    const wonProspects = filteredProspects.filter(p => p.statut === \"Gagné\");\n    \n    const totalRevenue = wonProspects.reduce((sum, p) => {\n      const commission = (p.prixEstime || p.budget || 0) * (p.tauxHonoraires || 0.04);\n      return sum + commission;\n    }, 0);\n\n    const roi = totalLeadCost > 0 ? ((totalRevenue - totalLeadCost) / totalLeadCost) * 100 : 0;\n    const conversionRate = filteredProspects.length > 0 ? (wonProspects.length / filteredProspects.length) * 100 : 0;\n    \n    const avgDealValue = wonProspects.length > 0 \n      ? totalRevenue / wonProspects.length \n      : 0;\n\n    const avgClosingTime = wonProspects.length > 0\n      ? wonProspects.reduce((sum, p) => sum + (p.estimatedClosingDays || 30), 0) / wonProspects.length\n      : 30;\n\n    return {\n      totalLeadCost,\n      totalRevenue,\n      roi,\n      conversionRate,\n      avgDealValue,\n      avgClosingTime,\n      totalProspects: filteredProspects.length,\n      wonDeals: wonProspects.length\n    };\n  }, [prospects, agentId]);\n\n  const formatEuro = (amount: number) => \n    new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(amount);\n\n  const formatPercent = (value: number) => `${value.toFixed(1)}%`;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <DollarSign className=\"w-5 h-5\" />\n          ROI Agent {agentId ? \"\" : \"(Global)\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-green-700\">Revenus générés</span>\n              <TrendingUp className=\"w-4 h-4 text-green-600\" />\n            </div>\n            <p className=\"text-lg font-bold text-green-800\">\n              {formatEuro(roiData.totalRevenue)}\n            </p>\n          </div>\n\n          <div className=\"p-3 bg-red-50 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-red-700\">Coût des leads</span>\n              <TrendingDown className=\"w-4 h-4 text-red-600\" />\n            </div>\n            <p className=\"text-lg font-bold text-red-800\">\n              {formatEuro(roiData.totalLeadCost)}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-blue-50 rounded-lg text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-2\">\n            <Target className=\"w-5 h-5 text-blue-600\" />\n            <span className=\"font-medium text-blue-700\">ROI</span>\n          </div>\n          <p className=\"text-2xl font-bold text-blue-800\">\n            {roiData.roi > 0 ? \"+\" : \"\"}{formatPercent(roiData.roi)}\n          </p>\n          <Badge variant={roiData.roi > 0 ? \"default\" : \"destructive\"} className=\"mt-2\">\n            {roiData.roi > 0 ? \"Rentable\" : \"Non rentable\"}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-600\">Taux de conversion:</span>\n            <p className=\"font-medium\">{formatPercent(roiData.conversionRate)}</p>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">Valeur moyenne:</span>\n            <p className=\"font-medium\">{formatEuro(roiData.avgDealValue)}</p>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">Temps moyen de clôture:</span>\n            <p className=\"font-medium\">{Math.round(roiData.avgClosingTime)} jours</p>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">Affaires gagnées:</span>\n            <p className=\"font-medium\">{roiData.wonDeals}/{roiData.totalProspects}</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4578}}}